// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/edu/robertob/p1compi2/analysis/Lexer.flex

package edu.robertob.p1compi2.analysis;

//import edu.robertob.olc1.vj24.Engine.Structs.JCError;
import edu.robertob.p1compi2.engine.structs.PError;
import java_cup.runtime.Symbol;
import java.util.LinkedList;


@SuppressWarnings("fallthrough")
public class PLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0,  0,  0,  0,  0,  5,  6,  7,  8,  9, 10, 11, 12, 13, 
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 17, 18, 19,  0, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
    35, 29, 36, 37, 38, 39, 40, 41, 29, 42, 29, 43, 44, 45,  0, 29, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
    35, 29, 36, 37, 38, 39, 40, 41, 29, 42, 29, 46,  0, 47,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\24\21\1\22\1\23\1\24\1\25\1\0"+
    "\1\26\3\0\1\27\1\30\1\31\11\21\1\32\7\21"+
    "\1\33\1\34\4\21\1\35\1\36\6\21\1\37\7\21"+
    "\1\0\1\2\1\0\1\40\1\0\1\40\1\0\1\41"+
    "\1\42\7\21\1\43\2\21\1\44\2\21\1\45\4\21"+
    "\1\46\1\47\1\50\1\0\5\21\1\51\5\21\1\52"+
    "\3\21\1\0\4\21\1\53\1\54\3\21\1\55\1\21"+
    "\1\56\1\21\1\57\2\21\1\0\4\21\1\60\3\21"+
    "\1\61\1\62\1\63\2\21\1\64\1\21\1\0\1\65"+
    "\1\66\1\21\1\67\1\70\2\21\1\71\2\21\1\72"+
    "\1\0\7\21\1\73\1\74\1\21\1\0\2\21\1\75"+
    "\2\21\1\0\1\76\2\21\1\77\1\100\1\101\1\102"+
    "\1\21\1\0\1\103\2\21\1\104\1\105\1\21\1\106"+
    "\1\107\1\110\1\111\1\112\1\21\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\360\0\60\0\60\0\u0120"+
    "\0\60\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\60\0\60"+
    "\0\u0540\0\60\0\u0570\0\60\0\u05a0\0\u05d0\0\u0600\0\60"+
    "\0\60\0\60\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u02d0\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u02d0\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u02d0\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0540\0\60\0\u0cf0\0\60\0\u0d20\0\u0cf0\0\u0d50"+
    "\0\u0600\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0"+
    "\0\u0ed0\0\u02d0\0\u0f00\0\u0f30\0\u02d0\0\u0f60\0\u0f90\0\u02d0"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u02d0\0\u02d0\0\u02d0\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u02d0\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u02d0\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u02d0\0\u02d0\0\u1410\0\u1440"+
    "\0\u1470\0\u02d0\0\u14a0\0\u02d0\0\u14d0\0\u02d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u02d0\0\u1650\0\u1680"+
    "\0\u16b0\0\u02d0\0\u02d0\0\u02d0\0\u16e0\0\u1710\0\u02d0\0\u1740"+
    "\0\u1770\0\u02d0\0\u02d0\0\u17a0\0\u02d0\0\u02d0\0\u17d0\0\u1800"+
    "\0\u02d0\0\u1830\0\u1860\0\u02d0\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u02d0\0\u02d0\0\u1a10\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u02d0\0\u1ad0\0\u1b00\0\u1b30\0\u02d0\0\u1b60"+
    "\0\u1b90\0\u02d0\0\u02d0\0\u02d0\0\u02d0\0\u1bc0\0\u1bf0\0\u02d0"+
    "\0\u1c20\0\u1c50\0\u02d0\0\60\0\u1c80\0\u02d0\0\u02d0\0\60"+
    "\0\u02d0\0\u02d0\0\u1cb0\0\u02d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\32\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\32\1\47\1\2\1\50\1\51\1\52\61\0\2\3"+
    "\1\0\1\3\53\0\5\53\1\54\46\53\1\55\3\53"+
    "\10\0\1\56\63\0\1\57\1\0\1\15\5\0\27\32"+
    "\27\0\1\60\1\61\56\0\1\62\53\0\1\32\5\0"+
    "\15\32\1\63\2\32\1\64\6\32\23\0\1\32\5\0"+
    "\4\32\1\65\11\32\1\66\1\32\1\67\6\32\23\0"+
    "\1\32\5\0\1\70\6\32\1\71\6\32\1\72\10\32"+
    "\23\0\1\32\5\0\10\32\1\73\5\32\1\74\10\32"+
    "\23\0\1\32\5\0\13\32\1\75\1\32\1\76\11\32"+
    "\23\0\1\32\5\0\1\77\7\32\1\100\5\32\1\101"+
    "\4\32\1\102\3\32\23\0\1\32\5\0\16\32\1\103"+
    "\10\32\23\0\1\32\5\0\27\32\23\0\1\32\5\0"+
    "\5\32\1\104\7\32\1\105\11\32\23\0\1\32\5\0"+
    "\1\106\26\32\23\0\1\32\5\0\16\32\1\107\10\32"+
    "\23\0\1\32\5\0\10\32\1\110\5\32\1\111\10\32"+
    "\23\0\1\32\5\0\5\32\1\112\12\32\1\113\6\32"+
    "\23\0\1\32\5\0\1\114\17\32\1\115\6\32\23\0"+
    "\1\32\5\0\4\32\1\116\22\32\23\0\1\32\5\0"+
    "\4\32\1\117\15\32\1\120\4\32\23\0\1\32\5\0"+
    "\7\32\1\121\6\32\1\122\1\32\1\123\5\32\1\124"+
    "\23\0\1\32\5\0\15\32\1\125\11\32\23\0\1\32"+
    "\5\0\1\126\26\32\23\0\1\32\5\0\7\32\1\127"+
    "\1\130\7\32\1\131\6\32\5\0\57\132\1\133\5\134"+
    "\1\135\46\134\1\136\5\134\2\0\1\134\1\137\52\134"+
    "\10\56\1\140\47\56\16\0\1\141\57\0\1\32\5\0"+
    "\3\32\1\142\23\32\23\0\1\32\5\0\20\32\1\143"+
    "\6\32\23\0\1\32\5\0\6\32\1\144\20\32\23\0"+
    "\1\32\5\0\16\32\1\145\10\32\23\0\1\32\5\0"+
    "\4\32\1\146\22\32\23\0\1\32\5\0\21\32\1\147"+
    "\5\32\23\0\1\32\5\0\1\150\26\32\23\0\1\32"+
    "\5\0\15\32\1\151\11\32\23\0\1\32\5\0\24\32"+
    "\1\152\2\32\23\0\1\32\5\0\25\32\1\153\1\32"+
    "\23\0\1\32\5\0\21\32\1\154\5\32\23\0\1\32"+
    "\5\0\3\32\1\155\23\32\23\0\1\32\5\0\13\32"+
    "\1\156\13\32\23\0\1\32\5\0\13\32\1\157\13\32"+
    "\23\0\1\32\5\0\20\32\1\160\6\32\23\0\1\32"+
    "\5\0\15\32\1\161\11\32\23\0\1\32\5\0\22\32"+
    "\1\162\4\32\23\0\1\32\5\0\22\32\1\163\4\32"+
    "\23\0\1\32\5\0\1\32\1\164\25\32\23\0\1\32"+
    "\5\0\3\32\1\165\23\32\23\0\1\32\5\0\13\32"+
    "\1\166\13\32\23\0\1\32\5\0\22\32\1\167\4\32"+
    "\11\0\1\170\11\0\1\32\5\0\27\32\23\0\1\32"+
    "\5\0\2\32\1\171\24\32\23\0\1\32\5\0\16\32"+
    "\1\172\10\32\23\0\1\32\5\0\1\173\1\32\1\174"+
    "\14\32\1\175\7\32\23\0\1\32\5\0\22\32\1\176"+
    "\4\32\23\0\1\32\5\0\20\32\1\177\6\32\23\0"+
    "\1\32\5\0\4\32\1\200\22\32\23\0\1\32\5\0"+
    "\23\32\1\201\3\32\23\0\1\32\5\0\17\32\1\202"+
    "\7\32\23\0\1\32\5\0\22\32\1\203\4\32\23\0"+
    "\1\32\5\0\20\32\1\204\6\32\23\0\1\32\5\0"+
    "\10\32\1\205\16\32\23\0\1\32\5\0\22\32\1\206"+
    "\4\32\23\0\1\32\5\0\10\32\1\207\16\32\5\0"+
    "\5\134\1\54\46\134\1\136\5\134\2\0\54\134\7\56"+
    "\1\133\1\140\47\56\4\0\1\210\11\0\1\32\5\0"+
    "\27\32\23\0\1\32\5\0\1\211\26\32\23\0\1\32"+
    "\5\0\10\32\1\212\16\32\23\0\1\32\5\0\13\32"+
    "\1\213\13\32\23\0\1\32\5\0\1\214\26\32\23\0"+
    "\1\32\5\0\4\32\1\215\22\32\23\0\1\32\5\0"+
    "\20\32\1\216\6\32\23\0\1\32\5\0\21\32\1\217"+
    "\1\220\4\32\23\0\1\32\5\0\15\32\1\221\11\32"+
    "\23\0\1\32\5\0\4\32\1\222\22\32\23\0\1\32"+
    "\5\0\21\32\1\223\5\32\23\0\1\32\5\0\4\32"+
    "\1\224\22\32\23\0\1\32\5\0\2\32\1\225\24\32"+
    "\23\0\1\32\5\0\16\32\1\226\10\32\23\0\1\32"+
    "\5\0\4\32\1\227\22\32\23\0\1\32\5\0\4\32"+
    "\1\230\22\32\35\0\1\231\45\0\1\32\5\0\12\32"+
    "\1\232\14\32\23\0\1\32\5\0\2\32\1\233\3\32"+
    "\1\234\20\32\23\0\1\32\5\0\3\32\1\235\7\32"+
    "\1\236\13\32\23\0\1\32\5\0\16\32\1\237\10\32"+
    "\23\0\1\32\5\0\4\32\1\240\22\32\23\0\1\32"+
    "\5\0\10\32\1\241\16\32\23\0\1\32\5\0\15\32"+
    "\1\242\11\32\23\0\1\32\5\0\4\32\1\243\22\32"+
    "\23\0\1\32\5\0\4\32\1\244\22\32\23\0\1\32"+
    "\5\0\10\32\1\245\16\32\23\0\1\32\5\0\13\32"+
    "\1\246\13\32\23\0\1\32\5\0\7\32\1\247\17\32"+
    "\23\0\1\32\5\0\22\32\1\250\4\32\53\0\1\251"+
    "\27\0\1\32\5\0\26\32\1\252\23\0\1\32\5\0"+
    "\15\32\1\253\11\32\23\0\1\32\5\0\4\32\1\254"+
    "\22\32\23\0\1\32\5\0\12\32\1\255\14\32\23\0"+
    "\1\32\5\0\22\32\1\256\4\32\23\0\1\32\5\0"+
    "\10\32\1\257\16\32\23\0\1\32\5\0\22\32\1\260"+
    "\4\32\23\0\1\32\5\0\4\32\1\261\22\32\23\0"+
    "\1\32\5\0\22\32\1\262\4\32\23\0\1\32\5\0"+
    "\6\32\1\263\20\32\23\0\1\32\5\0\13\32\1\264"+
    "\13\32\44\0\1\265\36\0\1\32\5\0\4\32\1\266"+
    "\22\32\23\0\1\32\5\0\4\32\1\267\22\32\23\0"+
    "\1\32\5\0\20\32\1\270\6\32\23\0\1\32\5\0"+
    "\13\32\1\271\13\32\23\0\1\32\5\0\20\32\1\272"+
    "\6\32\23\0\1\32\5\0\1\273\26\32\23\0\1\32"+
    "\5\0\15\32\1\274\11\32\23\0\1\32\5\0\13\32"+
    "\1\275\13\32\23\0\1\32\5\0\4\32\1\276\22\32"+
    "\23\0\1\32\5\0\4\32\1\277\22\32\40\0\1\300"+
    "\42\0\1\32\5\0\1\301\26\32\23\0\1\32\5\0"+
    "\15\32\1\302\11\32\23\0\1\32\5\0\16\32\1\303"+
    "\10\32\23\0\1\32\5\0\10\32\1\304\16\32\23\0"+
    "\1\32\5\0\4\32\1\305\22\32\52\0\1\306\30\0"+
    "\1\32\5\0\3\32\1\307\23\32\23\0\1\32\5\0"+
    "\3\32\1\310\23\32\23\0\1\32\5\0\1\311\26\32"+
    "\23\0\1\32\5\0\15\32\1\312\11\32\23\0\1\32"+
    "\5\0\3\32\1\313\23\32\23\0\1\32\5\0\22\32"+
    "\1\314\4\32\23\0\1\32\5\0\6\32\1\315\20\32"+
    "\23\0\1\32\5\0\13\32\1\316\13\32\35\0\1\317"+
    "\45\0\1\32\5\0\15\32\1\320\11\32\23\0\1\32"+
    "\5\0\23\32\1\321\3\32\23\0\1\32\5\0\16\32"+
    "\1\322\10\32\23\0\1\32\5\0\20\32\1\323\6\32"+
    "\35\0\1\324\45\0\1\32\5\0\23\32\1\325\3\32"+
    "\23\0\1\32\5\0\14\32\1\326\12\32\23\0\1\32"+
    "\5\0\15\32\1\327\11\32\46\0\1\330\34\0\1\32"+
    "\5\0\4\32\1\331\22\32\23\0\1\32\5\0\15\32"+
    "\1\332\11\32\23\0\1\32\5\0\20\32\1\333\6\32"+
    "\23\0\1\32\5\0\4\32\1\334\22\32\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7392];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\7\11\1\1\2\11\1\1\1\11"+
    "\25\1\2\11\1\1\1\11\1\0\1\11\3\0\3\11"+
    "\47\1\1\0\1\11\1\0\1\11\1\0\1\1\1\0"+
    "\27\1\1\0\17\1\1\0\20\1\1\0\17\1\1\0"+
    "\13\1\1\0\12\1\1\0\5\1\1\0\10\1\1\0"+
    "\4\1\1\11\3\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private LinkedList<PError> errorList = new LinkedList<>();
    public LinkedList<PError> getLexicalErrorList(){
        return errorList;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PLexer(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    errorList = new LinkedList<>();
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF, yyline, yycolumn, "EOF");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { errorList.add(new PError(\"Lexico\", \"El caracter \" + yytext() + \" no pertenece al lenguaje, en: \"+yyline+\":\"+yycolumn, yyline, yycolumn));"+ZZ_NL+"System.out.println(\"Error lexico: El caracter \" + yytext() + \" no pertenece al lenguaje, en: \"+yyline+\":\"+yycolumn); }");
            { errorList.add(new PError("Lexico", "El caracter " + yytext() + " no pertenece al lenguaje, en: "+yyline+":"+yycolumn, yyline, yycolumn));
System.out.println("Error lexico: El caracter " + yytext() + " no pertenece al lenguaje, en: "+yyline+":"+yycolumn);
            }
          // fall through
          case 76: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] {  }");
            { 
            }
          // fall through
          case 77: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return new Symbol(sym.OPENPAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.OPENPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { return new Symbol(sym.CLOSEPAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CLOSEPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { return new Symbol(sym.ASTERISK, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.ASTERISK, yyline, yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return new Symbol(sym.PLUS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.PLUS, yyline, yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { return new Symbol(sym.COMMA, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.COMMA, yyline, yycolumn,yytext());
            }
          // fall through
          case 82: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return new Symbol(sym.MINUS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.MINUS, yyline, yycolumn,yytext());
            }
          // fall through
          case 83: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return new Symbol(sym.DOT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DOT, yyline, yycolumn,yytext());
            }
          // fall through
          case 84: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { return new Symbol(sym.SLASH, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.SLASH, yyline, yycolumn,yytext());
            }
          // fall through
          case 85: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return new Symbol(sym.INTEGER, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.INTEGER, yyline, yycolumn,yytext());
            }
          // fall through
          case 86: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return new Symbol(sym.COLON, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.COLON, yyline, yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return new Symbol(sym.SEMICOLON, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn,yytext());
            }
          // fall through
          case 88: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { return new Symbol(sym.LESS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.LESS, yyline, yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { return new Symbol(sym.EQUALS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.EQUALS, yyline, yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return new Symbol(sym.GREATER, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.GREATER, yyline, yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return new Symbol(sym.ID, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return new Symbol(sym.OPENBRACKET, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.OPENBRACKET, yyline, yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return new Symbol(sym.CLOSEBRACKET, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CLOSEBRACKET, yyline, yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return new Symbol(sym.OPENBRACE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.OPENBRACE, yyline, yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return new Symbol(sym.CLOSEBRACE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.CLOSEBRACE, yyline, yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { String foundString = yytext();"+ZZ_NL+"    String stringObj = foundString.substring(1, foundString.length()-1);"+ZZ_NL+"    return new Symbol(sym.STRING, yyline, yycolumn, stringObj); }");
            { String foundString = yytext();
    String stringObj = foundString.substring(1, foundString.length()-1);
    return new Symbol(sym.STRING, yyline, yycolumn, stringObj);
            }
          // fall through
          case 97: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { return new Symbol(sym.LESSEQUAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.LESSEQUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return new Symbol(sym.NOT_EQUALS, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.NOT_EQUALS, yyline, yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { return new Symbol(sym.GREATEREQUAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.GREATEREQUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return new Symbol(sym.RW_DO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_DO, yyline, yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return new Symbol(sym.RW_IF, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_IF, yyline, yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return new Symbol(sym.RW_IN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_IN, yyline, yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return new Symbol(sym.RW_OF, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_OF, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return new Symbol(sym.RW_OR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_OR, yyline, yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return new Symbol(sym.RW_TO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_TO, yyline, yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { String foundString = yytext();"+ZZ_NL+"    String stringObj = foundString.substring(1, foundString.length()-1);"+ZZ_NL+"    // Remember to transform the string to a char in CUP"+ZZ_NL+"    return new Symbol(sym.CHAR, yyline, yycolumn, stringObj); }");
            { String foundString = yytext();
    String stringObj = foundString.substring(1, foundString.length()-1);
    // Remember to transform the string to a char in CUP
    return new Symbol(sym.CHAR, yyline, yycolumn, stringObj);
            }
          // fall through
          case 107: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return new Symbol(sym.RW_AND, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_AND, yyline, yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return new Symbol(sym.RW_DIV, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_DIV, yyline, yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return new Symbol(sym.RW_END, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_END, yyline, yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return new Symbol(sym.RW_FOR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_FOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return new Symbol(sym.RW_MOD, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_MOD, yyline, yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return new Symbol(sym.RW_NIL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_NIL, yyline, yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return new Symbol(sym.RW_NOT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_NOT, yyline, yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return new Symbol(sym.RW_SET, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_SET, yyline, yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return new Symbol(sym.RW_VAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_VAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return new Symbol(sym.RW_CASE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_CASE, yyline, yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return new Symbol(sym.RW_CHAR, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_CHAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return new Symbol(sym.RW_ELSE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return new Symbol(sym.RW_FILE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_FILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return new Symbol(sym.RW_GOTO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_GOTO, yyline, yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return new Symbol(sym.RW_REAL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_REAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return new Symbol(sym.RW_THEN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_THEN, yyline, yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return new Symbol(sym.RW_TRUE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_TRUE, yyline, yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return new Symbol(sym.RW_TYPE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_TYPE, yyline, yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return new Symbol(sym.RW_WITH, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_WITH, yyline, yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return new Symbol(sym.RW_ARRAY, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_ARRAY, yyline, yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return new Symbol(sym.RW_BEGIN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_BEGIN, yyline, yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return new Symbol(sym.RW_BREAK, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_BREAK, yyline, yycolumn,yytext());
            }
          // fall through
          case 130: break;
          case 56:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return new Symbol(sym.RW_CONST, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_CONST, yyline, yycolumn,yytext());
            }
          // fall through
          case 131: break;
          case 57:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return new Symbol(sym.RW_FALSE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_FALSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 132: break;
          case 58:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return new Symbol(sym.RW_LABEL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_LABEL, yyline, yycolumn,yytext());
            }
          // fall through
          case 133: break;
          case 59:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return new Symbol(sym.RW_UNTIL, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_UNTIL, yyline, yycolumn,yytext());
            }
          // fall through
          case 134: break;
          case 60:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return new Symbol(sym.RW_WHILE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_WHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 135: break;
          case 61:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return new Symbol(sym.RW_DOWNTO, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_DOWNTO, yyline, yycolumn,yytext());
            }
          // fall through
          case 136: break;
          case 62:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return new Symbol(sym.RW_PACKED, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_PACKED, yyline, yycolumn,yytext());
            }
          // fall through
          case 137: break;
          case 63:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return new Symbol(sym.RW_READLN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_READLN, yyline, yycolumn,yytext());
            }
          // fall through
          case 138: break;
          case 64:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return new Symbol(sym.RW_RECORD, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_RECORD, yyline, yycolumn,yytext());
            }
          // fall through
          case 139: break;
          case 65:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return new Symbol(sym.RW_REPEAT, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_REPEAT, yyline, yycolumn,yytext());
            }
          // fall through
          case 140: break;
          case 66:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return new Symbol(sym.RW_STRING, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 141: break;
          case 67:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return new Symbol(sym.RW_BOOLEAN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_BOOLEAN, yyline, yycolumn,yytext());
            }
          // fall through
          case 142: break;
          case 68:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return new Symbol(sym.RW_INTEGER, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_INTEGER, yyline, yycolumn,yytext());
            }
          // fall through
          case 143: break;
          case 69:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return new Symbol(sym.RW_OR_ELSE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_OR_ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 144: break;
          case 70:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return new Symbol(sym.RW_PROGRAM, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_PROGRAM, yyline, yycolumn,yytext());
            }
          // fall through
          case 145: break;
          case 71:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return new Symbol(sym.RW_WRITELN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_WRITELN, yyline, yycolumn,yytext());
            }
          // fall through
          case 146: break;
          case 72:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return new Symbol(sym.RW_AND_THEN, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_AND_THEN, yyline, yycolumn,yytext());
            }
          // fall through
          case 147: break;
          case 73:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return new Symbol(sym.RW_CONTINUE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_CONTINUE, yyline, yycolumn,yytext());
            }
          // fall through
          case 148: break;
          case 74:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return new Symbol(sym.RW_FUNCTION, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_FUNCTION, yyline, yycolumn,yytext());
            }
          // fall through
          case 149: break;
          case 75:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return new Symbol(sym.RW_PROCEDURE, yyline, yycolumn,yytext()); }");
            { return new Symbol(sym.RW_PROCEDURE, yyline, yycolumn,yytext());
            }
          // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java PLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
