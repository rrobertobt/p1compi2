
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.p1compi2.analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import edu.robertob.p1compi2.engine.structs.*;
import edu.robertob.p1compi2.engine.base.*;
import edu.robertob.p1compi2.engine.statements.*;
import edu.robertob.p1compi2.engine.expressions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\006\000\002\003\006\000\002\003\005" +
    "\000\002\066\004\000\002\066\003\000\002\065\003\000" +
    "\002\065\003\000\002\004\006\000\002\007\005\000\002" +
    "\006\004\000\002\006\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\010\004\000\002\010\002\000\002" +
    "\011\003\000\002\011\004\000\002\011\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\015\003\000\002\015" +
    "\004\000\002\016\006\000\002\016\006\000\002\014\010" +
    "\000\002\014\011\000\002\017\005\000\002\022\005\000" +
    "\002\020\003\000\002\020\004\000\002\020\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\006\000\002\023\004\000\002\023\002\000\002\024\005" +
    "\000\002\024\003\000\002\024\002\000\002\026\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\027" +
    "\004\000\002\027\002\000\002\030\005\000\002\030\003" +
    "\000\002\030\002\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\036\006\000\002\036\011\000\002\037\011\000\002\037" +
    "\013\000\002\037\013\000\002\037\015\000\002\037\017" +
    "\000\002\037\015\000\002\037\012\000\002\037\014\000" +
    "\002\037\014\000\002\037\016\000\002\037\020\000\002" +
    "\037\016\000\002\040\004\000\002\040\003\000\002\041" +
    "\011\000\002\041\013\000\002\044\013\000\002\044\012" +
    "\000\002\045\004\000\002\045\003\000\002\046\006\000" +
    "\002\046\007\000\002\047\005\000\002\047\003\000\002" +
    "\050\005\000\002\050\006\000\002\052\011\000\002\052" +
    "\013\000\002\053\007\000\002\054\014\000\002\054\014" +
    "\000\002\054\016\000\002\054\016\000\002\056\012\000" +
    "\002\056\012\000\002\056\007\000\002\055\010\000\002" +
    "\062\010\000\002\061\010\000\002\057\005\000\002\057" +
    "\003\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\006\000\002\060\006\000" +
    "\002\060\006\000\002\060\006\000\002\067\006\000\002" +
    "\070\005\000\002\070\003\000\002\070\002\000\002\071" +
    "\003\000\002\063\006\000\002\064\006\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\004\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\003\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\004\034\004\001\002\000\004\066\u017a\001" +
    "\002\000\010\006\015\020\012\033\014\001\002\000\004" +
    "\002\011\001\002\000\004\125\010\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\004\066\u016e" +
    "\001\002\000\012\006\uffdc\010\uffdc\042\024\044\uffdc\001" +
    "\002\000\004\066\u0154\001\002\000\030\007\045\015\u0151" +
    "\017\047\022\042\036\034\045\031\060\044\061\040\062" +
    "\027\063\037\066\041\001\002\000\010\006\u014d\020\012" +
    "\033\014\001\002\000\012\006\uffdc\010\uffdc\042\024\044" +
    "\uffdc\001\002\000\010\006\ufff9\020\ufff9\033\ufff9\001\002" +
    "\000\010\006\ufffa\020\ufffa\033\ufffa\001\002\000\010\006" +
    "\ufff8\020\ufff8\033\ufff8\001\002\000\014\006\uffbc\010\u0130" +
    "\020\uffbc\033\uffbc\044\uffbc\001\002\000\004\066\367\001" +
    "\002\000\004\006\026\001\002\000\026\007\045\017\047" +
    "\022\042\036\034\045\031\060\044\061\040\062\027\063" +
    "\037\066\041\001\002\000\004\114\364\001\002\000\004" +
    "\122\363\001\002\000\004\114\351\001\002\000\032\007" +
    "\ufff1\015\ufff1\017\ufff1\022\ufff1\036\ufff1\043\ufff1\045\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\066\ufff1\001\002\000" +
    "\032\007\ufff2\015\ufff2\017\ufff2\022\ufff2\036\ufff2\043\ufff2" +
    "\045\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\066\ufff2\001" +
    "\002\000\026\007\045\017\047\022\042\036\034\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\032\007\ufff4\015\ufff4\017\ufff4\022\ufff4\036\ufff4\043\ufff4" +
    "\045\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\066\ufff4\001" +
    "\002\000\032\007\uffef\015\uffef\017\uffef\022\uffef\036\uffef" +
    "\043\uffef\045\uffef\060\uffef\061\uffef\062\uffef\063\uffef\066" +
    "\uffef\001\002\000\004\114\342\001\002\000\004\122\341" +
    "\001\002\000\010\104\331\114\173\123\330\001\002\000" +
    "\004\114\243\001\002\000\004\122\242\001\002\000\004" +
    "\122\241\001\002\000\004\114\205\001\002\000\004\122" +
    "\204\001\002\000\004\066\060\001\002\000\004\122\057" +
    "\001\002\000\030\007\045\015\054\017\047\022\042\036" +
    "\034\045\031\060\044\061\040\062\027\063\037\066\041" +
    "\001\002\000\032\007\uffeb\015\uffeb\017\uffeb\022\uffeb\036" +
    "\uffeb\043\uffeb\045\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\066\uffeb\001\002\000\032\007\ufff0\015\ufff0\017\ufff0\022" +
    "\ufff0\036\ufff0\043\ufff0\045\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\066\ufff0\001\002\000\004\122\056\001\002\000" +
    "\032\007\ufff5\015\ufff5\017\ufff5\022\ufff5\036\ufff5\043\ufff5" +
    "\045\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\066\ufff5\001" +
    "\002\000\010\006\uff7f\020\uff7f\033\uff7f\001\002\000\032" +
    "\007\uffe9\015\uffe9\017\uffe9\022\uffe9\036\uffe9\043\uffe9\045" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\066\uffe9\001\002" +
    "\000\004\104\061\001\002\000\004\074\062\001\002\000" +
    "\026\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\001\002\000\026\027" +
    "\074\047\071\050\066\065\072\066\073\067\067\070\064" +
    "\071\076\073\063\114\070\001\002\000\062\004\uff6b\011" +
    "\uff6b\012\uff6b\013\uff6b\014\uff6b\025\uff6b\031\uff6b\041\uff6b" +
    "\056\uff6b\057\uff6b\072\uff6b\073\uff6b\074\uff6b\077\uff6b\104" +
    "\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b\113\uff6b\115\uff6b" +
    "\121\uff6b\122\uff6b\124\uff6b\001\002\000\062\004\uff55\011" +
    "\uff55\012\uff55\013\uff55\014\uff55\025\uff55\031\uff55\041\uff55" +
    "\056\uff55\057\uff55\072\uff55\073\uff55\074\uff55\077\uff55\104" +
    "\uff55\106\uff55\107\uff55\110\uff55\111\uff55\113\uff55\115\uff55" +
    "\121\uff55\122\uff55\124\uff55\001\002\000\062\004\uff67\011" +
    "\uff67\012\uff67\013\uff67\014\uff67\025\uff67\031\uff67\041\uff67" +
    "\056\uff67\057\uff67\072\uff67\073\uff67\074\uff67\077\uff67\104" +
    "\uff67\106\uff67\107\uff67\110\uff67\111\uff67\113\uff67\115\uff67" +
    "\121\uff67\122\uff67\124\uff67\001\002\000\062\004\uff6c\011" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\025\uff6c\031\uff6c\041\uff6c" +
    "\056\uff6c\057\uff6c\072\uff6c\073\uff6c\074\uff6c\077\uff6c\104" +
    "\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\113\uff6c\115\uff6c" +
    "\121\uff6c\122\uff6c\124\uff6c\001\002\000\026\027\074\047" +
    "\071\050\066\065\072\066\073\067\067\070\064\071\076" +
    "\073\063\114\070\001\002\000\062\004\uff68\011\uff68\012" +
    "\uff68\013\uff68\014\uff68\025\uff68\031\uff68\041\uff68\056\uff68" +
    "\057\uff68\072\uff68\073\uff68\074\uff68\077\uff68\104\uff68\106" +
    "\uff68\107\uff68\110\uff68\111\uff68\113\uff68\115\uff68\121\uff68" +
    "\122\uff68\124\uff68\001\002\000\062\004\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\uff69\025\uff69\031\uff69\041\uff69\056\uff69" +
    "\057\uff69\072\uff69\073\uff69\074\uff69\077\uff69\104\uff69\106" +
    "\uff69\107\uff69\110\uff69\111\uff69\113\uff69\115\uff69\121\uff69" +
    "\122\uff69\124\uff69\001\002\000\064\004\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\025\uff6d\031\uff6d\041\uff6d\056\uff6d" +
    "\057\uff6d\072\uff6d\073\uff6d\074\uff6d\077\uff6d\104\uff6d\106" +
    "\uff6d\107\uff6d\110\uff6d\111\uff6d\113\uff6d\114\173\115\uff6d" +
    "\121\uff6d\122\uff6d\124\uff6d\001\002\000\026\027\074\047" +
    "\071\050\066\065\072\066\073\067\067\070\064\071\076" +
    "\073\063\114\070\001\002\000\044\004\116\011\106\013" +
    "\115\025\102\031\112\041\101\056\117\057\111\072\105" +
    "\073\077\074\114\077\107\106\110\107\103\110\104\111" +
    "\113\113\100\001\002\000\062\004\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\014\uff6a\025\uff6a\031\uff6a\041\uff6a\056\uff6a\057" +
    "\uff6a\072\uff6a\073\uff6a\074\uff6a\077\uff6a\104\uff6a\106\uff6a" +
    "\107\uff6a\110\uff6a\111\uff6a\113\uff6a\115\uff6a\121\uff6a\122" +
    "\uff6a\124\uff6a\001\002\000\026\027\074\047\071\050\066" +
    "\065\072\066\073\067\067\070\064\071\076\073\063\114" +
    "\070\001\002\000\026\027\074\047\071\050\066\065\072" +
    "\066\073\067\067\070\064\071\076\073\063\114\070\001" +
    "\002\000\026\027\074\047\071\050\066\065\072\066\073" +
    "\067\067\070\064\071\076\073\063\114\070\001\002\000" +
    "\026\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\001\002\000\026\027" +
    "\074\047\071\050\066\065\072\066\073\067\067\070\064" +
    "\071\076\073\063\114\070\001\002\000\026\027\074\047" +
    "\071\050\066\065\072\066\073\067\067\070\064\071\076" +
    "\073\063\114\070\001\002\000\026\027\074\047\071\050" +
    "\066\065\072\066\073\067\067\070\064\071\076\073\063" +
    "\114\070\001\002\000\026\027\074\047\071\050\066\065" +
    "\072\066\073\067\067\070\064\071\076\073\063\114\070" +
    "\001\002\000\026\027\074\047\071\050\066\065\072\066" +
    "\073\067\067\070\064\071\076\073\063\114\070\001\002" +
    "\000\026\027\074\047\071\050\066\065\072\066\073\067" +
    "\067\070\064\071\076\073\063\114\070\001\002\000\026" +
    "\027\074\047\071\050\066\065\072\066\073\067\067\070" +
    "\064\071\076\073\063\114\070\001\002\000\026\027\074" +
    "\047\071\050\066\065\072\066\073\067\067\070\064\071" +
    "\076\073\063\114\070\001\002\000\026\027\074\047\071" +
    "\050\066\065\072\066\073\067\067\070\064\071\076\073" +
    "\063\114\070\001\002\000\026\027\074\047\071\050\066" +
    "\065\072\066\073\067\067\070\064\071\076\073\063\114" +
    "\070\001\002\000\026\027\074\047\071\050\066\065\072" +
    "\066\073\067\067\070\064\071\076\073\063\114\070\001" +
    "\002\000\026\027\074\047\071\050\066\065\072\066\073" +
    "\067\067\070\064\071\076\073\063\114\070\001\002\000" +
    "\026\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\001\002\000\062\004" +
    "\116\011\106\012\uff5d\013\uff5d\014\uff5d\025\102\031\112" +
    "\041\uff5d\056\uff5d\057\uff5d\072\105\073\077\074\114\077" +
    "\107\104\uff5d\106\110\107\103\110\104\111\113\113\100" +
    "\115\uff5d\121\uff5d\122\uff5d\124\uff5d\001\002\000\062\004" +
    "\uff5f\011\106\012\uff5f\013\uff5f\014\uff5f\025\102\031\uff5f" +
    "\041\uff5f\056\uff5f\057\uff5f\072\105\073\077\074\114\077" +
    "\107\104\uff5f\106\110\107\103\110\104\111\113\113\100" +
    "\115\uff5f\121\uff5f\122\uff5f\124\uff5f\001\002\000\042\004" +
    "\116\011\106\012\123\025\102\031\112\056\117\057\111" +
    "\072\105\073\077\074\114\077\107\106\110\107\103\110" +
    "\104\111\113\113\100\001\002\000\030\006\131\007\045" +
    "\017\047\022\042\036\034\045\031\060\133\061\130\062" +
    "\027\063\037\066\041\001\002\000\006\014\uffdf\122\uffdf" +
    "\001\002\000\006\014\uffe7\122\uffe7\001\002\000\006\014" +
    "\uffe5\122\uffe5\001\002\000\006\014\uffe3\122\uffe3\001\002" +
    "\000\006\014\uffe1\122\uffe1\001\002\000\026\007\045\017" +
    "\047\022\042\036\034\045\031\060\044\061\040\062\027" +
    "\063\037\066\041\001\002\000\006\014\uffe0\122\uffe0\001" +
    "\002\000\006\014\uffe2\122\uffe2\001\002\000\006\014\uffe8" +
    "\122\uffe8\001\002\000\006\014\uffde\122\uffde\001\002\000" +
    "\006\014\uffe6\122\uffe6\001\002\000\004\122\141\001\002" +
    "\000\006\014\uffe4\122\uffe4\001\002\000\036\007\uff87\014" +
    "\uff87\015\uff87\017\uff87\022\uff87\036\uff87\043\uff87\045\uff87" +
    "\060\uff87\061\uff87\062\uff87\063\uff87\066\uff87\122\uff87\001" +
    "\002\000\030\007\045\015\143\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\122\144\001\002\000\036\007\uff85\014\uff85" +
    "\015\uff85\017\uff85\022\uff85\036\uff85\043\uff85\045\uff85\060" +
    "\uff85\061\uff85\062\uff85\063\uff85\066\uff85\122\uff85\001\002" +
    "\000\062\004\uff5b\011\106\012\uff5b\013\uff5b\014\uff5b\025" +
    "\102\031\uff5b\041\uff5b\056\uff5b\057\uff5b\072\105\073\077" +
    "\074\uff5b\077\107\104\uff5b\106\uff5b\107\uff5b\110\uff5b\111" +
    "\uff5b\113\uff5b\115\uff5b\121\uff5b\122\uff5b\124\uff5b\001\002" +
    "\000\062\004\uff57\011\106\012\uff57\013\uff57\014\uff57\025" +
    "\102\031\uff57\041\uff57\056\uff57\057\uff57\072\105\073\077" +
    "\074\uff57\077\107\104\uff57\106\uff57\107\uff57\110\uff57\111" +
    "\uff57\113\uff57\115\uff57\121\uff57\122\uff57\124\uff57\001\002" +
    "\000\062\004\116\011\106\012\uff5e\013\uff5e\014\uff5e\025" +
    "\102\031\uff5e\041\uff5e\056\uff5e\057\uff5e\072\105\073\077" +
    "\074\114\077\107\104\uff5e\106\110\107\103\110\104\111" +
    "\113\113\100\115\uff5e\121\uff5e\122\uff5e\124\uff5e\001\002" +
    "\000\062\004\116\011\106\012\uff5c\013\uff5c\014\uff5c\025" +
    "\102\031\112\041\uff5c\056\uff5c\057\uff5c\072\105\073\077" +
    "\074\114\077\107\104\uff5c\106\110\107\103\110\104\111" +
    "\113\113\100\115\uff5c\121\uff5c\122\uff5c\124\uff5c\001\002" +
    "\000\062\004\uff5a\011\106\012\uff5a\013\uff5a\014\uff5a\025" +
    "\102\031\uff5a\041\uff5a\056\uff5a\057\uff5a\072\105\073\077" +
    "\074\uff5a\077\107\104\uff5a\106\uff5a\107\uff5a\110\uff5a\111" +
    "\uff5a\113\uff5a\115\uff5a\121\uff5a\122\uff5a\124\uff5a\001\002" +
    "\000\062\004\uff64\011\uff64\012\uff64\013\uff64\014\uff64\025" +
    "\uff64\031\uff64\041\uff64\056\uff64\057\uff64\072\uff64\073\uff64" +
    "\074\uff64\077\uff64\104\uff64\106\uff64\107\uff64\110\uff64\111" +
    "\uff64\113\uff64\115\uff64\121\uff64\122\uff64\124\uff64\001\002" +
    "\000\062\004\uff63\011\uff63\012\uff63\013\uff63\014\uff63\025" +
    "\uff63\031\uff63\041\uff63\056\uff63\057\uff63\072\uff63\073\uff63" +
    "\074\uff63\077\uff63\104\uff63\106\uff63\107\uff63\110\uff63\111" +
    "\uff63\113\uff63\115\uff63\121\uff63\122\uff63\124\uff63\001\002" +
    "\000\062\004\uff66\011\106\012\uff66\013\uff66\014\uff66\025" +
    "\102\031\uff66\041\uff66\056\uff66\057\uff66\072\uff66\073\uff66" +
    "\074\uff66\077\107\104\uff66\106\uff66\107\uff66\110\uff66\111" +
    "\uff66\113\uff66\115\uff66\121\uff66\122\uff66\124\uff66\001\002" +
    "\000\062\004\uff58\011\106\012\uff58\013\uff58\014\uff58\025" +
    "\102\031\uff58\041\uff58\056\uff58\057\uff58\072\105\073\077" +
    "\074\uff58\077\107\104\uff58\106\uff58\107\uff58\110\uff58\111" +
    "\uff58\113\uff58\115\uff58\121\uff58\122\uff58\124\uff58\001\002" +
    "\000\062\004\uff59\011\106\012\uff59\013\uff59\014\uff59\025" +
    "\102\031\uff59\041\uff59\056\uff59\057\uff59\072\105\073\077" +
    "\074\uff59\077\107\104\uff59\106\uff59\107\uff59\110\uff59\111" +
    "\uff59\113\uff59\115\uff59\121\uff59\122\uff59\124\uff59\001\002" +
    "\000\062\004\uff62\011\uff62\012\uff62\013\uff62\014\uff62\025" +
    "\uff62\031\uff62\041\uff62\056\uff62\057\uff62\072\uff62\073\uff62" +
    "\074\uff62\077\uff62\104\uff62\106\uff62\107\uff62\110\uff62\111" +
    "\uff62\113\uff62\115\uff62\121\uff62\122\uff62\124\uff62\001\002" +
    "\000\042\004\116\011\106\012\161\025\102\031\112\056" +
    "\117\057\111\072\105\073\077\074\114\077\107\106\110" +
    "\107\103\110\104\111\113\113\100\001\002\000\030\006" +
    "\162\007\045\017\047\022\042\036\034\045\031\060\133" +
    "\061\130\062\027\063\037\066\041\001\002\000\026\007" +
    "\045\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\004\122\164\001" +
    "\002\000\036\007\uff88\014\uff88\015\uff88\017\uff88\022\uff88" +
    "\036\uff88\043\uff88\045\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\066\uff88\122\uff88\001\002\000\030\007\045\015\166" +
    "\017\047\022\042\036\034\045\031\060\044\061\040\062" +
    "\027\063\037\066\041\001\002\000\004\122\167\001\002" +
    "\000\036\007\uff86\014\uff86\015\uff86\017\uff86\022\uff86\036" +
    "\uff86\043\uff86\045\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\066\uff86\122\uff86\001\002\000\062\004\uff56\011\106\012" +
    "\uff56\013\uff56\014\uff56\025\102\031\uff56\041\uff56\056\uff56" +
    "\057\uff56\072\105\073\077\074\uff56\077\107\104\uff56\106" +
    "\uff56\107\uff56\110\uff56\111\uff56\113\uff56\115\uff56\121\uff56" +
    "\122\uff56\124\uff56\001\002\000\062\004\uff65\011\106\012" +
    "\uff65\013\uff65\014\uff65\025\102\031\uff65\041\uff65\056\uff65" +
    "\057\uff65\072\uff65\073\uff65\074\uff65\077\107\104\uff65\106" +
    "\uff65\107\uff65\110\uff65\111\uff65\113\uff65\115\uff65\121\uff65" +
    "\122\uff65\124\uff65\001\002\000\062\004\uff60\011\106\012" +
    "\uff60\013\uff60\014\uff60\025\102\031\uff60\041\uff60\056\uff60" +
    "\057\uff60\072\105\073\077\074\114\077\107\104\uff60\106" +
    "\110\107\103\110\104\111\113\113\100\115\uff60\121\uff60" +
    "\122\uff60\124\uff60\001\002\000\032\027\074\047\071\050" +
    "\066\065\072\066\073\067\067\070\064\071\076\073\063" +
    "\114\070\115\uff71\121\uff71\001\002\000\006\115\177\121" +
    "\176\001\002\000\044\004\116\011\106\025\102\031\112" +
    "\056\117\057\111\072\105\073\077\074\114\077\107\106" +
    "\110\107\103\110\104\111\113\113\100\115\uff72\121\uff72" +
    "\001\002\000\026\027\074\047\071\050\066\065\072\066" +
    "\073\067\067\070\064\071\076\073\063\114\070\001\002" +
    "\000\062\004\uff74\011\uff74\012\uff74\013\uff74\014\uff74\025" +
    "\uff74\031\uff74\041\uff74\056\uff74\057\uff74\072\uff74\073\uff74" +
    "\074\uff74\077\uff74\104\uff74\106\uff74\107\uff74\110\uff74\111" +
    "\uff74\113\uff74\115\uff74\121\uff74\122\uff74\124\uff74\001\002" +
    "\000\044\004\116\011\106\025\102\031\112\056\117\057" +
    "\111\072\105\073\077\074\114\077\107\106\110\107\103" +
    "\110\104\111\113\113\100\115\uff73\121\uff73\001\002\000" +
    "\042\004\116\011\106\025\102\031\112\056\117\057\111" +
    "\072\105\073\077\074\114\077\107\106\110\107\103\110" +
    "\104\111\113\113\100\115\202\001\002\000\062\004\uff54" +
    "\011\uff54\012\uff54\013\uff54\014\uff54\025\uff54\031\uff54\041" +
    "\uff54\056\uff54\057\uff54\072\uff54\073\uff54\074\uff54\077\uff54" +
    "\104\uff54\106\uff54\107\uff54\110\uff54\111\uff54\113\uff54\115" +
    "\uff54\121\uff54\122\uff54\124\uff54\001\002\000\062\004\uff61" +
    "\011\uff61\012\uff61\013\uff61\014\uff61\025\uff61\031\uff61\041" +
    "\uff61\056\uff61\057\uff61\072\uff61\073\uff61\074\uff61\077\uff61" +
    "\104\uff61\106\uff61\107\uff61\110\uff61\111\uff61\113\uff61\115" +
    "\uff61\121\uff61\122\uff61\124\uff61\001\002\000\032\007\ufff3" +
    "\015\ufff3\017\ufff3\022\ufff3\036\ufff3\043\ufff3\045\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\066\ufff3\001\002\000\026" +
    "\027\074\047\071\050\066\065\072\066\073\067\067\070" +
    "\064\071\076\073\063\114\070\001\002\000\042\004\116" +
    "\011\106\025\102\031\112\056\117\057\111\072\105\073" +
    "\077\074\114\077\107\106\110\107\103\110\104\111\113" +
    "\113\100\115\207\001\002\000\004\030\210\001\002\000" +
    "\026\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\001\002\000\006\104" +
    "\232\121\231\001\002\000\032\014\215\015\216\027\074" +
    "\047\071\050\066\065\072\066\073\067\067\070\064\071" +
    "\076\073\063\114\070\001\002\000\044\004\116\011\106" +
    "\025\102\031\112\056\117\057\111\072\105\073\077\074" +
    "\114\077\107\104\uff8e\106\110\107\103\110\104\111\113" +
    "\113\100\121\uff8e\001\002\000\032\014\uff92\015\uff92\027" +
    "\uff92\047\uff92\050\uff92\065\uff92\066\uff92\067\uff92\070\uff92" +
    "\071\uff92\073\uff92\114\uff92\001\002\000\030\006\224\007" +
    "\045\017\047\022\042\036\034\045\031\060\133\061\130" +
    "\062\027\063\037\066\041\001\002\000\004\122\223\001" +
    "\002\000\004\015\221\001\002\000\032\014\uff93\015\uff93" +
    "\027\uff93\047\uff93\050\uff93\065\uff93\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\073\uff93\114\uff93\001\002\000\004\122\222" +
    "\001\002\000\036\007\uff95\014\uff95\015\uff95\017\uff95\022" +
    "\uff95\036\uff95\043\uff95\045\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\066\uff95\122\uff95\001\002\000\036\007\uff94\014" +
    "\uff94\015\uff94\017\uff94\022\uff94\036\uff94\043\uff94\045\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\066\uff94\122\uff94\001" +
    "\002\000\026\007\045\017\047\022\042\036\034\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\004\122\226\001\002\000\004\015\uff8d\001\002\000\030" +
    "\007\045\015\230\017\047\022\042\036\034\045\031\060" +
    "\044\061\040\062\027\063\037\066\041\001\002\000\004" +
    "\015\uff8c\001\002\000\026\027\074\047\071\050\066\065" +
    "\072\066\073\067\067\070\064\071\076\073\063\114\070" +
    "\001\002\000\030\006\233\007\045\017\047\022\042\036" +
    "\034\045\031\060\133\061\130\062\027\063\037\066\041" +
    "\001\002\000\026\007\045\017\047\022\042\036\034\045" +
    "\031\060\044\061\040\062\027\063\037\066\041\001\002" +
    "\000\004\122\235\001\002\000\032\014\uff91\015\uff91\027" +
    "\uff91\047\uff91\050\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\073\uff91\114\uff91\001\002\000\030\007\045\015" +
    "\237\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\032\014\uff90\015" +
    "\uff90\027\uff90\047\uff90\050\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\073\uff90\114\uff90\001\002\000\044\004" +
    "\116\011\106\025\102\031\112\056\117\057\111\072\105" +
    "\073\077\074\114\077\107\104\uff8f\106\110\107\103\110" +
    "\104\111\113\113\100\121\uff8f\001\002\000\032\007\uffee" +
    "\015\uffee\017\uffee\022\uffee\036\uffee\043\uffee\045\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\066\uffee\001\002\000\032" +
    "\007\uffec\015\uffec\017\uffec\022\uffec\036\uffec\043\uffec\045" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\066\uffec\001\002" +
    "\000\026\027\074\047\071\050\066\065\072\066\073\067" +
    "\067\070\064\071\076\073\063\114\070\001\002\000\042" +
    "\004\116\011\106\025\102\031\112\056\117\057\111\072" +
    "\105\073\077\074\114\077\107\106\110\107\103\110\104" +
    "\111\113\113\100\115\245\001\002\000\004\040\246\001" +
    "\002\000\030\006\247\007\045\017\047\022\042\036\034" +
    "\045\031\060\133\061\130\062\027\063\037\066\041\001" +
    "\002\000\026\007\045\017\047\022\042\036\034\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\006\014\252\122\251\001\002\000\036\007\uffa5\014\uffa5" +
    "\015\uffa5\017\uffa5\022\uffa5\036\uffa5\043\uffa5\045\uffa5\060" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\066\uffa5\122\uffa5\001\002" +
    "\000\030\006\320\007\045\017\047\022\261\036\034\045" +
    "\031\060\133\061\130\062\027\063\037\066\041\001\002" +
    "\000\006\014\256\122\255\001\002\000\006\014\uff98\122" +
    "\uff98\001\002\000\036\007\uff9f\014\uff9f\015\uff9f\017\uff9f" +
    "\022\uff9f\036\uff9f\043\uff9f\045\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\066\uff9f\122\uff9f\001\002\000\030\006\260" +
    "\007\045\017\047\022\261\036\034\045\031\060\133\061" +
    "\130\062\027\063\037\066\041\001\002\000\006\014\uff99" +
    "\122\uff99\001\002\000\026\007\045\017\047\022\042\036" +
    "\034\045\031\060\044\061\040\062\027\063\037\066\041" +
    "\001\002\000\004\114\264\001\002\000\004\122\263\001" +
    "\002\000\036\007\uff9d\014\uff9d\015\uff9d\017\uff9d\022\uff9d" +
    "\036\uff9d\043\uff9d\045\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\066\uff9d\122\uff9d\001\002\000\026\027\074\047\071" +
    "\050\066\065\072\066\073\067\067\070\064\071\076\073" +
    "\063\114\070\001\002\000\042\004\116\011\106\025\102" +
    "\031\112\056\117\057\111\072\105\073\077\074\114\077" +
    "\107\106\110\107\103\110\104\111\113\113\100\115\266" +
    "\001\002\000\004\040\267\001\002\000\030\006\270\007" +
    "\045\017\047\022\042\036\034\045\031\060\133\061\130" +
    "\062\027\063\037\066\041\001\002\000\026\007\045\017" +
    "\047\022\042\036\034\045\031\060\044\061\040\062\027" +
    "\063\037\066\041\001\002\000\006\014\uff97\122\uff97\001" +
    "\002\000\030\007\045\015\273\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\006\014\uff96\122\uff96\001\002\000\036\007\uffa4" +
    "\014\uffa4\015\uffa4\017\uffa4\022\uffa4\036\uffa4\043\uffa4\045" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\066\uffa4\122\uffa4" +
    "\001\002\000\030\006\307\007\045\017\047\022\261\036" +
    "\034\045\031\060\133\061\130\062\027\063\037\066\041" +
    "\001\002\000\006\014\300\122\277\001\002\000\036\007" +
    "\uff9e\014\uff9e\015\uff9e\017\uff9e\022\uff9e\036\uff9e\043\uff9e" +
    "\045\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\066\uff9e\122" +
    "\uff9e\001\002\000\030\006\301\007\045\017\047\022\261" +
    "\036\034\045\031\060\133\061\130\062\027\063\037\066" +
    "\041\001\002\000\026\007\045\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\122\303\001\002\000\036\007\uff9c\014\uff9c" +
    "\015\uff9c\017\uff9c\022\uff9c\036\uff9c\043\uff9c\045\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\122\uff9c\001\002" +
    "\000\030\007\045\015\305\017\047\022\042\036\034\045" +
    "\031\060\044\061\040\062\027\063\037\066\041\001\002" +
    "\000\004\122\306\001\002\000\036\007\uff9b\014\uff9b\015" +
    "\uff9b\017\uff9b\022\uff9b\036\uff9b\043\uff9b\045\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\066\uff9b\122\uff9b\001\002\000" +
    "\026\007\045\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\004\122" +
    "\311\001\002\000\036\007\uffa2\014\uffa2\015\uffa2\017\uffa2" +
    "\022\uffa2\036\uffa2\043\uffa2\045\uffa2\060\uffa2\061\uffa2\062" +
    "\uffa2\063\uffa2\066\uffa2\122\uffa2\001\002\000\030\007\045" +
    "\015\313\017\047\022\042\036\034\045\031\060\044\061" +
    "\040\062\027\063\037\066\041\001\002\000\004\122\314" +
    "\001\002\000\036\007\uffa1\014\uffa1\015\uffa1\017\uffa1\022" +
    "\uffa1\036\uffa1\043\uffa1\045\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\066\uffa1\122\uffa1\001\002\000\030\007\045\015" +
    "\316\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\004\122\317\001" +
    "\002\000\036\007\uff9a\014\uff9a\015\uff9a\017\uff9a\022\uff9a" +
    "\036\uff9a\043\uff9a\045\uff9a\060\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\066\uff9a\122\uff9a\001\002\000\026\007\045\017\047" +
    "\022\042\036\034\045\031\060\044\061\040\062\027\063" +
    "\037\066\041\001\002\000\004\122\322\001\002\000\036" +
    "\007\uffa3\014\uffa3\015\uffa3\017\uffa3\022\uffa3\036\uffa3\043" +
    "\uffa3\045\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3" +
    "\122\uffa3\001\002\000\030\007\045\015\324\017\047\022" +
    "\042\036\034\045\031\060\044\061\040\062\027\063\037" +
    "\066\041\001\002\000\004\122\325\001\002\000\036\007" +
    "\uffa0\014\uffa0\015\uffa0\017\uffa0\022\uffa0\036\uffa0\043\uffa0" +
    "\045\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0\122" +
    "\uffa0\001\002\000\030\007\045\015\327\017\047\022\042" +
    "\036\034\045\031\060\044\061\040\062\027\063\037\066" +
    "\041\001\002\000\006\014\275\122\274\001\002\000\026" +
    "\027\074\047\071\050\066\065\072\066\073\067\067\070" +
    "\064\071\076\073\063\114\070\001\002\000\004\074\332" +
    "\001\002\000\026\027\074\047\071\050\066\065\072\066" +
    "\073\067\067\070\064\071\076\073\063\114\070\001\002" +
    "\000\044\004\116\011\106\014\uffa7\025\102\031\112\056" +
    "\117\057\111\072\105\073\077\074\114\077\107\106\110" +
    "\107\103\110\104\111\113\113\100\122\uffa7\001\002\000" +
    "\042\004\116\011\106\025\102\031\112\056\117\057\111" +
    "\072\105\073\077\074\114\077\107\106\110\107\103\110" +
    "\104\111\113\113\100\124\335\001\002\000\004\104\336" +
    "\001\002\000\004\074\337\001\002\000\026\027\074\047" +
    "\071\050\066\065\072\066\073\067\067\070\064\071\076" +
    "\073\063\114\070\001\002\000\044\004\116\011\106\014" +
    "\uffa6\025\102\031\112\056\117\057\111\072\105\073\077" +
    "\074\114\077\107\106\110\107\103\110\104\111\113\113" +
    "\100\122\uffa6\001\002\000\032\007\uffed\015\uffed\017\uffed" +
    "\022\uffed\036\uffed\043\uffed\045\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\066\uffed\001\002\000\032\027\074\047\071" +
    "\050\066\065\072\066\073\067\067\070\064\071\076\073" +
    "\063\114\070\115\uff71\121\uff71\001\002\000\006\115\344" +
    "\121\176\001\002\000\006\014\uff6e\122\uff6e\001\002\000" +
    "\030\007\045\017\047\022\042\036\034\043\346\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\026\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\001\002\000\042\004" +
    "\116\011\106\025\102\031\112\056\117\057\111\072\105" +
    "\073\077\074\114\077\107\106\110\107\103\110\104\111" +
    "\113\113\100\122\350\001\002\000\036\007\uff89\014\uff89" +
    "\015\uff89\017\uff89\022\uff89\036\uff89\043\uff89\045\uff89\060" +
    "\uff89\061\uff89\062\uff89\063\uff89\066\uff89\122\uff89\001\002" +
    "\000\026\027\074\047\071\050\066\065\072\066\073\067" +
    "\067\070\064\071\076\073\063\114\070\001\002\000\042" +
    "\004\116\011\106\025\102\031\112\056\117\057\111\072" +
    "\105\073\077\074\114\077\107\106\110\107\103\110\104" +
    "\111\113\113\100\115\353\001\002\000\004\012\354\001" +
    "\002\000\030\006\355\007\045\017\047\022\042\036\034" +
    "\045\031\060\133\061\130\062\027\063\037\066\041\001" +
    "\002\000\026\007\045\017\047\022\042\036\034\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\004\122\357\001\002\000\036\007\uff8b\014\uff8b\015\uff8b" +
    "\017\uff8b\022\uff8b\036\uff8b\043\uff8b\045\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\066\uff8b\122\uff8b\001\002\000\030" +
    "\007\045\015\361\017\047\022\042\036\034\045\031\060" +
    "\044\061\040\062\027\063\037\066\041\001\002\000\004" +
    "\122\362\001\002\000\036\007\uff8a\014\uff8a\015\uff8a\017" +
    "\uff8a\022\uff8a\036\uff8a\043\uff8a\045\uff8a\060\uff8a\061\uff8a" +
    "\062\uff8a\063\uff8a\066\uff8a\122\uff8a\001\002\000\032\007" +
    "\uffea\015\uffea\017\uffea\022\uffea\036\uffea\043\uffea\045\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea\001\002\000" +
    "\032\027\074\047\071\050\066\065\072\066\073\067\067" +
    "\070\064\071\076\073\063\114\070\115\uff71\121\uff71\001" +
    "\002\000\006\115\366\121\176\001\002\000\006\014\uff6f" +
    "\122\uff6f\001\002\000\010\074\uffd2\104\uffd2\121\uffd2\001" +
    "\002\000\014\006\uffdd\010\uffdd\020\uffdd\033\uffdd\044\uffdd" +
    "\001\002\000\016\006\uffd4\010\uffd4\020\uffd4\033\uffd4\044" +
    "\uffd4\122\uffd4\001\002\000\016\006\uffdb\010\uffdb\020\uffdb" +
    "\033\uffdb\044\uffdb\122\u012e\001\002\000\006\074\375\121" +
    "\374\001\002\000\004\066\u012d\001\002\000\032\005\u010b" +
    "\032\u010c\035\u0106\051\u0101\052\u010a\053\u010d\054\u0108\055" +
    "\u0104\066\u0107\067\u0100\071\u010e\073\377\001\002\000\004" +
    "\125\u012a\001\002\000\004\067\u0129\001\002\000\026\006" +
    "\uffcc\010\uffcc\015\uffcc\020\uffcc\033\uffcc\044\uffcc\115\uffcc" +
    "\122\uffcc\124\uffcc\125\uffcc\001\002\000\022\006\uffd1\010" +
    "\uffd1\015\uffd1\020\uffd1\033\uffd1\044\uffd1\115\uffd1\122\uffd1" +
    "\001\002\000\016\006\uffd7\010\uffd7\020\uffd7\033\uffd7\044" +
    "\uffd7\122\uffd7\001\002\000\016\006\uffc6\010\uffc6\020\uffc6" +
    "\033\uffc6\044\uffc6\122\uffc6\001\002\000\022\006\uffcd\010" +
    "\uffcd\015\uffcd\020\uffcd\033\uffcd\044\uffcd\115\uffcd\122\uffcd" +
    "\001\002\000\016\006\uffd8\010\uffd8\020\uffd8\033\uffd8\044" +
    "\uffd8\122\uffd8\001\002\000\004\066\367\001\002\000\016" +
    "\006\uffd5\010\uffd5\020\uffd5\033\uffd5\044\uffd5\122\uffd5\001" +
    "\002\000\022\006\uffce\010\uffce\015\uffce\020\uffce\033\uffce" +
    "\044\uffce\115\uffce\122\uffce\001\002\000\016\006\uffd6\010" +
    "\uffd6\020\uffd6\033\uffd6\044\uffd6\122\uffd6\001\002\000\022" +
    "\006\uffd0\010\uffd0\015\uffd0\020\uffd0\033\uffd0\044\uffd0\115" +
    "\uffd0\122\uffd0\001\002\000\004\123\u0118\001\002\000\004" +
    "\005\u0112\001\002\000\022\006\uffcf\010\uffcf\015\uffcf\020" +
    "\uffcf\033\uffcf\044\uffcf\115\uffcf\122\uffcf\001\002\000\004" +
    "\125\u010f\001\002\000\004\125\u0110\001\002\000\004\071" +
    "\u0111\001\002\000\024\006\uffc9\010\uffc9\015\uffc9\020\uffc9" +
    "\033\uffc9\044\uffc9\115\uffc9\122\uffc9\124\uffc9\001\002\000" +
    "\004\123\u0113\001\002\000\010\067\u0100\071\u010e\073\377" +
    "\001\002\000\004\124\u0115\001\002\000\004\030\u0116\001" +
    "\002\000\014\051\u0101\052\u010a\053\u010d\054\u0108\055\u0104" +
    "\001\002\000\022\006\uffc7\010\uffc7\015\uffc7\020\uffc7\033" +
    "\uffc7\044\uffc7\115\uffc7\122\uffc7\001\002\000\010\067\u0100" +
    "\071\u010e\073\377\001\002\000\004\124\u011a\001\002\000" +
    "\004\030\u011b\001\002\000\014\051\u0101\052\u010a\053\u010d" +
    "\054\u0108\055\u0104\001\002\000\022\006\uffc8\010\uffc8\015" +
    "\uffc8\020\uffc8\033\uffc8\044\uffc8\115\uffc8\122\uffc8\001\002" +
    "\000\004\015\u0128\001\002\000\006\015\uffc4\122\u0126\001" +
    "\002\000\006\104\u0120\121\374\001\002\000\030\005\u010b" +
    "\032\u010c\035\u0123\051\u0101\052\u010a\053\u010d\054\u0108\055" +
    "\u0104\067\u0100\071\u010e\073\377\001\002\000\006\015\uffc0" +
    "\122\uffc0\001\002\000\006\015\uffc1\122\uffc1\001\002\000" +
    "\004\066\u0125\001\002\000\006\015\uffbf\122\uffbf\001\002" +
    "\000\006\015\uffbe\122\uffbe\001\002\000\006\015\uffc3\066" +
    "\367\001\002\000\004\015\uffc2\001\002\000\016\006\uffc5" +
    "\010\uffc5\020\uffc5\033\uffc5\044\uffc5\122\uffc5\001\002\000" +
    "\026\006\uffcb\010\uffcb\015\uffcb\020\uffcb\033\uffcb\044\uffcb" +
    "\115\uffcb\122\uffcb\124\uffcb\125\uffcb\001\002\000\004\125" +
    "\u012b\001\002\000\006\067\u0100\073\377\001\002\000\024" +
    "\006\uffca\010\uffca\015\uffca\020\uffca\033\uffca\044\uffca\115" +
    "\uffca\122\uffca\124\uffca\001\002\000\010\074\uffd3\104\uffd3" +
    "\121\uffd3\001\002\000\016\006\uffda\010\uffda\020\uffda\033" +
    "\uffda\044\uffda\066\367\001\002\000\014\006\uffd9\010\uffd9" +
    "\020\uffd9\033\uffd9\044\uffd9\001\002\000\014\006\uffb9\020" +
    "\uffb9\033\uffb9\044\uffb9\066\u013f\001\002\000\012\006\uffb0" +
    "\020\uffb0\033\uffb0\044\u0132\001\002\000\012\006\uffad\020" +
    "\uffad\033\uffad\066\367\001\002\000\010\006\ufff6\020\ufff6" +
    "\033\ufff6\001\002\000\012\006\uffae\020\uffae\033\uffae\122" +
    "\u013d\001\002\000\010\006\uffb1\020\uffb1\033\uffb1\001\002" +
    "\000\006\104\u0137\121\374\001\002\000\032\005\u010b\032" +
    "\u010c\035\u0106\051\u0101\052\u010a\053\u010d\054\u0108\055\u0104" +
    "\066\u013b\067\u0100\071\u010e\073\377\001\002\000\012\006" +
    "\uffaa\020\uffaa\033\uffaa\122\uffaa\001\002\000\012\006\uffa9" +
    "\020\uffa9\033\uffa9\122\uffa9\001\002\000\012\006\uffac\020" +
    "\uffac\033\uffac\122\uffac\001\002\000\012\006\uffab\020\uffab" +
    "\033\uffab\122\uffab\001\002\000\012\006\uffa8\020\uffa8\033" +
    "\uffa8\122\uffa8\001\002\000\012\006\uffad\020\uffad\033\uffad" +
    "\066\367\001\002\000\010\006\uffaf\020\uffaf\033\uffaf\001" +
    "\002\000\004\074\u0144\001\002\000\012\006\uffbd\020\uffbd" +
    "\033\uffbd\044\uffbd\001\002\000\014\006\uffba\020\uffba\033" +
    "\uffba\044\uffba\122\u0142\001\002\000\014\006\uffb9\020\uffb9" +
    "\033\uffb9\044\uffb9\066\u013f\001\002\000\012\006\uffbb\020" +
    "\uffbb\033\uffbb\044\uffbb\001\002\000\016\047\u0148\050\u0149" +
    "\065\u0147\067\u0146\070\u014a\071\u014b\001\002\000\014\006" +
    "\uffb8\020\uffb8\033\uffb8\044\uffb8\122\uffb8\001\002\000\014" +
    "\006\uffb7\020\uffb7\033\uffb7\044\uffb7\122\uffb7\001\002\000" +
    "\014\006\uffb4\020\uffb4\033\uffb4\044\uffb4\122\uffb4\001\002" +
    "\000\014\006\uffb3\020\uffb3\033\uffb3\044\uffb3\122\uffb3\001" +
    "\002\000\014\006\uffb2\020\uffb2\033\uffb2\044\uffb2\122\uffb2" +
    "\001\002\000\014\006\uffb6\020\uffb6\033\uffb6\044\uffb6\122" +
    "\uffb6\001\002\000\014\006\uffb5\020\uffb5\033\uffb5\044\uffb5" +
    "\122\uffb5\001\002\000\010\006\ufffb\020\ufffb\033\ufffb\001" +
    "\002\000\030\007\045\015\u014e\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\125\ufffd\001\002\000\030\007\045\015\u0150" +
    "\017\047\022\042\036\034\045\031\060\044\061\040\062" +
    "\027\063\037\066\041\001\002\000\004\125\uffff\001\002" +
    "\000\004\125\ufffc\001\002\000\030\007\045\015\u0153\017" +
    "\047\022\042\036\034\045\031\060\044\061\040\062\027" +
    "\063\037\066\041\001\002\000\004\125\ufffe\001\002\000" +
    "\004\114\u0155\001\002\000\006\044\u0156\066\367\001\002" +
    "\000\004\066\367\001\002\000\006\115\u0160\122\u015f\001" +
    "\002\000\006\115\uff7d\122\uff7d\001\002\000\006\104\u015a" +
    "\121\374\001\002\000\030\005\u010b\032\u010c\051\u0101\052" +
    "\u010a\053\u010d\054\u0108\055\u0104\066\u015d\067\u0100\071\u010e" +
    "\073\377\001\002\000\006\115\uff7b\122\uff7b\001\002\000" +
    "\006\115\uff7c\122\uff7c\001\002\000\006\115\uff79\122\uff79" +
    "\001\002\000\006\115\uff7a\122\uff7a\001\002\000\006\044" +
    "\u0156\066\367\001\002\000\004\122\u0161\001\002\000\012" +
    "\006\uff80\010\uff80\042\uff80\044\uff80\001\002\000\006\115" +
    "\uff7e\122\uff7e\001\002\000\006\104\u0164\121\374\001\002" +
    "\000\030\005\u010b\032\u010c\051\u0101\052\u010a\053\u010d\054" +
    "\u0108\055\u0104\066\u0167\067\u0100\071\u010e\073\377\001\002" +
    "\000\006\115\uff77\122\uff77\001\002\000\006\115\uff78\122" +
    "\uff78\001\002\000\006\115\uff75\122\uff75\001\002\000\006" +
    "\115\uff76\122\uff76\001\002\000\004\006\u016a\001\002\000" +
    "\026\007\045\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\030\007" +
    "\045\015\u016c\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\004\122" +
    "\u016d\001\002\000\010\006\uff81\020\uff81\033\uff81\001\002" +
    "\000\006\104\u016f\114\u0170\001\002\000\014\051\u0101\052" +
    "\u010a\053\u010d\054\u0108\055\u0104\001\002\000\006\044\u0156" +
    "\066\367\001\002\000\006\115\u0172\122\u015f\001\002\000" +
    "\004\104\u0173\001\002\000\016\051\u0101\052\u010a\053\u010d" +
    "\054\u0108\055\u0104\066\u0174\001\002\000\004\122\u0177\001" +
    "\002\000\004\122\u0176\001\002\000\012\006\uff84\010\uff84" +
    "\042\uff84\044\uff84\001\002\000\012\006\uff83\010\uff83\042" +
    "\uff83\044\uff83\001\002\000\004\122\u0179\001\002\000\012" +
    "\006\uff82\010\uff82\042\uff82\044\uff82\001\002\000\004\122" +
    "\u017b\001\002\000\016\006\uffdc\010\uffdc\020\uffdc\033\uffdc" +
    "\042\024\044\uffdc\001\002\000\010\006\ufff7\020\ufff7\033" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017a\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\016\055\017\056\012\061\021\062\016" +
    "\065\020\066\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u0168\010\022\001\001\000\002\001\001\000" +
    "\030\005\034\006\u0151\036\045\037\032\044\051\052\031" +
    "\053\052\054\035\063\027\064\047\067\042\001\001\000" +
    "\014\055\017\056\012\061\021\062\016\065\u014b\001\001" +
    "\000\006\007\024\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0130\001\001" +
    "\000\012\011\367\012\371\013\372\017\370\001\001\000" +
    "\002\001\001\000\030\005\034\006\050\036\045\037\032" +
    "\044\051\052\031\053\052\054\035\063\027\064\047\067" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\034\006\344\036\045\037\032\044\051\052\031\053\052" +
    "\054\035\063\027\064\047\067\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\054\036\045\037" +
    "\032\044\051\052\031\053\052\054\035\063\027\064\047" +
    "\067\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\074\067\064\001\001\000\006\033\202\067\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\200\067\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\171\067\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\170\067\064\001\001\000\006\033\167\067" +
    "\064\001\001\000\006\033\157\067\064\001\001\000\006" +
    "\033\156\067\064\001\001\000\006\033\155\067\064\001" +
    "\001\000\006\033\154\067\064\001\001\000\006\033\153" +
    "\067\064\001\001\000\006\033\152\067\064\001\001\000" +
    "\006\033\151\067\064\001\001\000\006\033\150\067\064" +
    "\001\001\000\006\033\147\067\064\001\001\000\006\033" +
    "\146\067\064\001\001\000\006\033\145\067\064\001\001" +
    "\000\006\033\144\067\064\001\001\000\006\033\121\067" +
    "\064\001\001\000\006\033\120\067\064\001\001\000\006" +
    "\033\117\067\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\136\036\133\037\124" +
    "\044\135\052\125\053\137\054\126\063\123\064\134\067" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\034\006\141\036\045\037\032\044\051\052\031\053\052" +
    "\054\035\063\027\064\047\067\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\054\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\162\036\133\037\124" +
    "\044\135\052\125\053\137\054\126\063\123\064\134\067" +
    "\131\001\001\000\030\005\034\006\164\036\045\037\032" +
    "\044\051\052\031\053\052\054\035\063\027\064\047\067" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\054\036\045\037\032\044\051\052\031\053\052\054" +
    "\035\063\027\064\047\067\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\174\067\064\070\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\177\067" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\205\067\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\212\045\211\046\213\047" +
    "\210\067\064\001\001\000\002\001\001\000\014\033\212" +
    "\046\217\047\210\050\216\067\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\035\224\036\133\037\124" +
    "\044\135\052\125\053\137\054\126\063\123\064\134\067" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\034\006\226\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\054" +
    "\036\045\037\032\044\051\052\031\053\052\054\035\063" +
    "\027\064\047\067\042\001\001\000\002\001\001\000\006" +
    "\033\237\067\064\001\001\000\026\035\233\036\133\037" +
    "\124\044\135\052\125\053\137\054\126\063\123\064\134" +
    "\067\131\001\001\000\030\005\034\006\235\036\045\037" +
    "\032\044\051\052\031\053\052\054\035\063\027\064\047" +
    "\067\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\054\036\045\037\032\044\051\052\031\053\052" +
    "\054\035\063\027\064\047\067\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\243\067\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\035\247\036\133\037\124\044\135" +
    "\052\125\053\137\054\126\063\123\064\134\067\131\001" +
    "\001\000\030\005\034\006\325\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\006\040\252\041\253\001\001\000\002\001\001" +
    "\000\026\035\320\036\133\037\124\044\135\052\125\053" +
    "\137\054\126\063\123\064\134\067\131\001\001\000\004" +
    "\041\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\035\261\036\133\037\124\044\135\052\125\053\137" +
    "\054\126\063\123\064\134\067\131\001\001\000\002\001" +
    "\001\000\030\005\034\006\314\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\264\067\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\035\270\036\133\037\124\044\135" +
    "\052\125\053\137\054\126\063\123\064\134\067\131\001" +
    "\001\000\030\005\034\006\271\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\006\040\252\041\253\001\001\000\026\005\054" +
    "\036\045\037\032\044\051\052\031\053\052\054\035\063" +
    "\027\064\047\067\042\001\001\000\006\040\275\041\253" +
    "\001\001\000\002\001\001\000\026\035\307\036\133\037" +
    "\124\044\135\052\125\053\137\054\126\063\123\064\134" +
    "\067\131\001\001\000\004\041\256\001\001\000\002\001" +
    "\001\000\026\035\301\036\133\037\124\044\135\052\125" +
    "\053\137\054\126\063\123\064\134\067\131\001\001\000" +
    "\030\005\034\006\303\036\045\037\032\044\051\052\031" +
    "\053\052\054\035\063\027\064\047\067\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\054\036\045" +
    "\037\032\044\051\052\031\053\052\054\035\063\027\064" +
    "\047\067\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\034\006\311\036\045\037\032\044\051\052" +
    "\031\053\052\054\035\063\027\064\047\067\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\054\036" +
    "\045\037\032\044\051\052\031\053\052\054\035\063\027" +
    "\064\047\067\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\054\036\045\037\032\044\051\052\031" +
    "\053\052\054\035\063\027\064\047\067\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\034\006\322" +
    "\036\045\037\032\044\051\052\031\053\052\054\035\063" +
    "\027\064\047\067\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\054\036\045\037\032\044\051\052" +
    "\031\053\052\054\035\063\027\064\047\067\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\054\036" +
    "\045\037\032\044\051\052\031\053\052\054\035\063\027" +
    "\064\047\067\042\001\001\000\006\040\275\041\253\001" +
    "\001\000\006\033\333\067\064\001\001\000\002\001\001" +
    "\000\006\033\332\067\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\337\067\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\174\067\064\070\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\054\036\045\037" +
    "\032\044\051\052\031\053\052\054\035\063\027\064\047" +
    "\067\042\001\001\000\006\033\346\067\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\351\067\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\355\036\133\037\124\044\135\052\125\053\137\054\126" +
    "\063\123\064\134\067\131\001\001\000\030\005\034\006" +
    "\357\036\045\037\032\044\051\052\031\053\052\054\035" +
    "\063\027\064\047\067\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\054\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\174\067\064\070\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\u0101\015\375\016\u0108\022\u0102" +
    "\032\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u011e\020\u011c\021\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\375\016\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0116\001\001\000" +
    "\002\001\001\000\006\015\375\016\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\u0120\015\375\016\u0123\032\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\u011e\020" +
    "\u0126\021\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\u012e" +
    "\012\371\013\372\017\370\001\001\000\002\001\001\000" +
    "\006\024\u013f\026\u0140\001\001\000\004\027\u0132\001\001" +
    "\000\010\013\u0135\030\u0134\031\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\u0137\015\375\016\u013b\022\u0138\032\u0139\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\u0135\030" +
    "\u013d\031\u0133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\u0142\026" +
    "\u0140\001\001\000\002\001\001\000\004\025\u0144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\034\006\u014e\036" +
    "\045\037\032\044\051\052\031\053\052\054\035\063\027" +
    "\064\047\067\042\001\001\000\002\001\001\000\026\005" +
    "\054\036\045\037\032\044\051\052\031\053\052\054\035" +
    "\063\027\064\047\067\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\054\036\045\037\032\044\051" +
    "\052\031\053\052\054\035\063\027\064\047\067\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\u0158" +
    "\057\u0156\060\u0157\001\001\000\004\013\u0162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\u015a\015\375\016\u015d\032\u015b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u0158\060\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\u0164\015\375\016\u0167\032\u0165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\034\006\u016a\036\045\037" +
    "\032\044\051\052\031\053\052\054\035\063\027\064\047" +
    "\067\042\001\001\000\026\005\054\036\045\037\032\044" +
    "\051\052\031\053\052\054\035\063\027\064\047\067\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0177\001\001\000\010\013\u0158\057\u0170" +
    "\060\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u017b\010\022" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    PLexer s;
    PParser(PLexer s){this.s = s;}
    private LinkedList<PError> errorList = new LinkedList<>();
    public LinkedList<PError> getSyntaxErrorList(){
        return errorList;
    }
//
    public void syntax_error(Symbol s){
        errorList.add(new PError("✍ Sintaxis", "No se esperaba el componente: "+s.value, s.left, s.right));
//          System.out.println("Syntax error at line: "+s.left+" column: "+s.right + " at symbol: "+s.value);
//          System.out.println(expected_token_ids());
    }
//
    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new PError("✍ ERROR FATAL - Deteniendo...", "No se esperaba el componente: "+s.value, s.left, s.right));
//        System.out.println("Unrecovered syntax error at line: "+s.left+" column: "+s.right + " at symbol: "+s.value);
//        System.out.println(expected_token_ids());
    }

//    public void report_error(String message, Object info){
//        errorList.add(new PError("Sintaxis", message);
//        System.out.println("info: "+info + " message: "+message);
//    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PParser$actions {


  private final PParser parser;

  /** Constructor */
  CUP$PParser$actions(PParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PParser$do_action_part00000000(
    int                        CUP$PParser$act_num,
    java_cup.runtime.lr_parser CUP$PParser$parser,
    java.util.Stack            CUP$PParser$stack,
    int                        CUP$PParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PParser$result;

      /* select the action based on the action number */
      switch (CUP$PParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		RESULT = start_val;
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PParser$parser.done_parsing();
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= PROGRAM DOT 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Program a = (Program)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM_HEADER PROCEDURE_FUNCTION_DECLARATIONS RW_BEGIN PROGRAM_BODY RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new Program(a,c,b);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PROGRAM_HEADER RW_BEGIN PROGRAM_BODY RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new Program(a,null,b);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PROGRAM_HEADER PROCEDURE_FUNCTION_DECLARATIONS RW_BEGIN RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
        RESULT = new Program(a,c,null);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAM ::= PROGRAM_HEADER RW_BEGIN RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
        RESULT = new Program(a,null,null);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROCEDURE_FUNCTION_DECLARATIONS ::= PROCEDURE_FUNCTION_DECLARATIONS PROCEDURE_FUNCTION_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATIONS",52, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_FUNCTION_DECLARATIONS ::= PROCEDURE_FUNCTION_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATIONS",52, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_FUNCTION_DECLARATION ::= FUNCTION_DECLARATION_BLOCK 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATION",51, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_FUNCTION_DECLARATION ::= PROCEDURE_DECLARATION_BLOCK 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATION",51, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAM_HEADER ::= RW_PROGRAM ID SEMICOLON DECLARATIONS_BLOCK 
            {
              Program.ProgramHeader RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
    RESULT = new Program.ProgramHeader(aleft, aright, a);
    var typesList = (LinkedList<TypeDeclaration>)b[0];
    var constsList = (LinkedList<Statement>)b[1];
    var varsList = (LinkedList<Statement>)b[2];
    if (typesList == null) typesList = new LinkedList<>();
    if (constsList == null) constsList = new LinkedList<>();
    if (varsList == null) varsList = new LinkedList<>();

    RESULT.getStatements().addAll(typesList);
    RESULT.getStatements().addAll(constsList);
    RESULT.getStatements().addAll(varsList);
    System.out.println("Program header: "+RESULT.getStatements().size());
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_HEADER",2, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATIONS_BLOCK ::= TYPE_DECLARATION_BLOCK CONSTANT_DECLARATION_BLOCK VARIABLE_DECLARATION_BLOCK 
            {
              Object[] RESULT =null;
		int typesListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int typesListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<TypeDeclaration> typesList = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int constsListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int constsListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> constsList = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> varsList = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Object[]{typesList, constsList, varsList}; System.out.println("Declarations block: "+typesList.size()+" "+constsList.size()+" "+varsList.size()); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_BLOCK",5, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAM_BODY ::= PROGRAM_BODY PROGRAM_BODY_STATEMENT 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",4, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAM_BODY ::= PROGRAM_BODY_STATEMENT 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",4, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAM_BODY_STATEMENT ::= SYMBOL_ASSIGNATION SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROGRAM_BODY_STATEMENT ::= IF_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROGRAM_BODY_STATEMENT ::= WHILE_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PROGRAM_BODY_STATEMENT ::= REPEAT_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROGRAM_BODY_STATEMENT ::= FOR_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROGRAM_BODY_STATEMENT ::= RW_BREAK SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROGRAM_BODY_STATEMENT ::= RW_CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROGRAM_BODY_STATEMENT ::= CALL_TO_METHOD SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROGRAM_BODY_STATEMENT ::= CASE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROGRAM_BODY_STATEMENT ::= WRITELN_CALL SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROGRAM_BODY_STATEMENT ::= READLN_CALL SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENT ::= SYMBOL_ASSIGNATION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT ::= IF_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENT ::= CASE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENT ::= WHILE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENT ::= REPEAT_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENT ::= FOR_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENT ::= RW_BREAK 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENT ::= RW_CONTINUE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENT ::= CALL_TO_METHOD 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENT ::= WRITELN_CALL 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENT ::= READLN_CALL 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE_DECLARATION_BLOCK ::= RW_TYPE TYPE_DECLARATION_LIST 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<TypeDeclaration> a = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_BLOCK",6, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE_DECLARATION_BLOCK ::= 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_BLOCK",6, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION SEMICOLON 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION SEMICOLON TYPE_DECLARATION_LIST 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<TypeDeclaration> b = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b, false, false, false, 1, 0, 0); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS ARRAY_TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b.getParentTypeId(), true, false, false, ((int)b.getRangeDefinition()[1] - (int)b.getRangeDefinition()[0])+1, (int)b.getRangeDefinition()[0], (int)b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS RANGE_DEF 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, TypesTable.DefaultTypes.INTEGER.id, false, true, false, 1, (int)b[0], (int)b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b, false, false, true, 0, 0, 0); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE_DECLARATION ::= RECORD_DECLARATION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IDENTIFIER_LIST ::= IDENTIFIER_LIST COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",9, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IDENTIFIER_LIST ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",9, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE ::= RW_INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.INTEGER.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPE ::= RW_REAL 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.REAL.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPE ::= RW_CHAR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.CHARACTER.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE ::= RW_STRING 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.STRING.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TYPE ::= RW_BOOLEAN 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.BOOLEAN.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RANGE_INT ::= INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = Integer.parseInt(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_INT",11, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RANGE_INT ::= MINUS INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = Integer.parseInt(a) * -1; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_INT",11, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RANGE_DEF ::= RANGE_INT DOT DOT RANGE_INT 
            {
              Object[] RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Integer min = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer max = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Object[]{min, max}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_DEF",12, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RANGE_DEF ::= CHAR DOT DOT CHAR 
            {
              Object[] RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Object[]{(int)min.charAt(0), (int)max.charAt(0)}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_DEF",12, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARRAY_TYPE ::= RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF TYPE 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARRAY_TYPE ::= RW_PACKED RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF TYPE 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RECORD_DECLARATION ::= IDENTIFIER_LIST EQUALS RECORD_USE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RECORD_DECLARATION",13, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RECORD_USE ::= RW_RECORD FIELD_LIST RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RECORD_USE",16, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FIELD_LIST ::= FIELD_DECLARATION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FIELD_LIST ::= FIELD_DECLARATION SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FIELD_LIST ::= FIELD_DECLARATION SEMICOLON FIELD_LIST 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON RW_RECORD ID 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONSTANT_DECLARATION_BLOCK ::= RW_CONST CONSTANT_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_BLOCK",17, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONSTANT_DECLARATION_BLOCK ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_BLOCK",17, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONSTANT_DECLARATION_LIST ::= CONSTANT_DECLARATION SEMICOLON CONSTANT_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONSTANT_DECLARATION_LIST ::= CONSTANT_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSTANT_DECLARATION_LIST ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSTANT_DECLARATION ::= ID EQUALS CONSTANT_VALUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new ConstantDeclaration(-1, aleft, aright, a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION",20, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONSTANT_VALUE ::= INTEGER 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.INTEGER.id, Integer.parseInt(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSTANT_VALUE ::= DECIMAL 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.REAL.id, Double.parseDouble(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONSTANT_VALUE ::= CHAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.CHARACTER.id, (int)a.charAt(0)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSTANT_VALUE ::= STRING 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.STRING.id, a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONSTANT_VALUE ::= RW_TRUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, true); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONSTANT_VALUE ::= RW_FALSE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, false); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLE_DECLARATION_BLOCK ::= RW_VAR VARIABLE_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_BLOCK",21, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLE_DECLARATION_BLOCK ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_BLOCK",21, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLE_DECLARATION_LIST ::= VARIABLE_DECLARATION SEMICOLON VARIABLE_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLE_DECLARATION_LIST ::= VARIABLE_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLE_DECLARATION_LIST ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, false, false, null, null, null, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, false, true, null, null, b, -1); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, true, false, false, b.getRangeDefinition()[0], b.getRangeDefinition()[1], null, b.getParentTypeId()); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON RECORD_USE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, true, false, b[0], b[1], null, TypesTable.DefaultTypes.INTEGER.id); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SYMBOL_ASSIGNATION ::= ID COLON EQUALS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("SYMBOL_ASSIGNATION",28, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SYMBOL_ASSIGNATION ::= ID OPENBRACKET EXPRESSION CLOSEBRACKET COLON EQUALS EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("SYMBOL_ASSIGNATION",28, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
  var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
  RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);

    var statementAsList2 = new LinkedList<Statement>();
    statementAsList2.add(c);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), statementAsList2, aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(c);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-12)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
  var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);

    var statementAsList2 = new LinkedList<Statement>();
    statementAsList2.add(d);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), statementAsList2, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(d);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> d = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-13)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> d = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), d, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		IfStatement.ConditionBlock b = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",30, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		IfStatement.ConditionBlock b = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",30, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement.ConditionBlock(a, statementAsList);
 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new IfStatement.ConditionBlock(a, b);
     
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASE_STATEMENT ::= RW_CASE OPENPAR EXPRESSION CLOSEPAR RW_OF CASE_ELEMENT_LIST CASE_ELSE RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",34, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE_STATEMENT ::= RW_CASE OPENPAR EXPRESSION CLOSEPAR RW_OF CASE_ELEMENT_LIST RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",34, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASE_ELEMENT_LIST ::= CASE_ELEMENT_LIST CASE_ELEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT_LIST",35, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE_ELEMENT_LIST ::= CASE_ELEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT_LIST",35, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE_ELEMENT ::= CASE_VALUE_LIST COLON STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT",36, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE_ELEMENT ::= CASE_VALUE_LIST COLON RW_BEGIN PROGRAM_BODY RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT",36, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE_VALUE_LIST ::= CASE_VALUE_LIST COMMA EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_VALUE_LIST",37, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASE_VALUE_LIST ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_VALUE_LIST",37, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASE_ELSE ::= RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELSE",38, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE_ELSE ::= RW_ELSE RW_BEGIN PROGRAM_BODY RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELSE",38, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // WHILE_STATEMENT ::= RW_WHILE OPENPAR EXPRESSION CLOSEPAR RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new WhileLoop(a, statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",40, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // WHILE_STATEMENT ::= RW_WHILE OPENPAR EXPRESSION CLOSEPAR RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new WhileLoop(a, b, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",40, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // REPEAT_STATEMENT ::= RW_REPEAT PROGRAM_BODY RW_UNTIL EXPRESSION SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
                    RESULT = new RepeatLoop(b, a, aleft, aright);
                    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("REPEAT_STATEMENT",41, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_TO EXPRESSION RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_DOWNTO EXPRESSION RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_TO EXPRESSION RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_DOWNTO EXPRESSION RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR COLON TYPE SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, b, c, null}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR COLON ID SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, b, -1, c}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID COLON TYPE SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, new LinkedList<>(), b}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNCTION_DECLARATION_BLOCK ::= FUNCTION_DECLARATION_START DECLARATIONS_BLOCK RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
var allHeaderStatements = new LinkedList<Statement>();
var typesList = (LinkedList<TypeDeclaration>)b[0];
var constsList = (LinkedList<Statement>)b[1];
var varsList = (LinkedList<Statement>)b[2];
if (typesList == null) typesList = new LinkedList<>();
if (constsList == null) constsList = new LinkedList<>();
if (varsList == null) varsList = new LinkedList<>();
allHeaderStatements.addAll(typesList);
allHeaderStatements.addAll(constsList);
allHeaderStatements.addAll(varsList);

RESULT = new FunctionDeclaration(
    0,
    aleft,
    aright,
    (String)a[0],
    (LinkedList<HashMap>)a[1],
    allHeaderStatements,
    c,
    (String)a[2],
    (int)a[3]
    );
   
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BLOCK",43, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PROCEDURE_DECLARATION_START ::= RW_PROCEDURE ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR SEMICOLON 
            {
              Object[] RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_DECLARATION_START",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PROCEDURE_DECLARATION_BLOCK ::= PROCEDURE_DECLARATION_START DECLARATIONS_BLOCK RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_DECLARATION_BLOCK",47, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAMETERS_DECLARATION ::= PARAMETERS_DECLARATION SEMICOLON PARAMETER_DECLARATION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARAMETERS_DECLARATION ::= PARAMETER_DECLARATION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECLARATION",45, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b.getParentTypeId()); RESULT.put("isArray", true); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", b.getRangeDefinition()[0]); RESULT.put("maxVal", b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", TypesTable.DefaultTypes.INTEGER.id); RESULT.put("isArray", false); RESULT.put("isRange", true); RESULT.put("isRecord", false); RESULT.put("minVal", b[0]); RESULT.put("maxVal", b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b); RESULT.put("isArray", false); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", null); RESULT.put("maxVal", null); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b.getParentTypeId()); RESULT.put("isArray", true); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", b.getRangeDefinition()[0]); RESULT.put("maxVal", b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON RANGE_DEF 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", TypesTable.DefaultTypes.INTEGER.id); RESULT.put("isArray", false); RESULT.put("isRange", true); RESULT.put("isRecord", false); RESULT.put("minVal", b[0]); RESULT.put("maxVal", b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b); RESULT.put("isArray", false); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", null); RESULT.put("maxVal", null); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CALL_TO_METHOD ::= ID OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_TO_METHOD",53, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CALL_ARGUMENTS ::= CALL_ARGUMENTS COMMA EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",54, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CALL_ARGUMENTS ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",54, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CALL_ARGUMENTS ::= 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",54, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ARGUMENT ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",55, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // WRITELN_CALL ::= RW_WRITELN OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WRITELN_CALL",49, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // READLN_CALL ::= RW_READLN OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("READLN_CALL",50, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESSION ::= ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new SymbolAccess(a, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESSION ::= INTEGER 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.INTEGER.id, Integer.parseInt(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESSION ::= DECIMAL 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.REAL.id, Double.parseDouble(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESSION ::= CHAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.CHARACTER.id, (int)a.charAt(0)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESSION ::= STRING 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.STRING.id, a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESSION ::= RW_TRUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, true); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESSION ::= RW_FALSE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, false); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.SUM, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.SUB, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESSION ::= EXPRESSION ASTERISK EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.MUL, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESSION ::= EXPRESSION RW_DIV EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.DIV, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESSION ::= EXPRESSION RW_MOD EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.MOD, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, ArithmeticOperators.NEG, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESSION ::= RW_NOT EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, LogicalOperators.NOT, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESSION ::= EXPRESSION RW_AND EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.AND, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESSION ::= EXPRESSION RW_OR EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.OR, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESSION ::= EXPRESSION RW_AND_THEN EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.ANDTHEN, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESSION ::= EXPRESSION RW_OR_ELSE EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.ORELSE, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESSION ::= EXPRESSION EQUALS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESSION ::= EXPRESSION LESS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.LESS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESSION ::= EXPRESSION GREATER EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.GREATER, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESSION ::= EXPRESSION LESSEQUAL EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.LESS_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESSION ::= EXPRESSION GREATEREQUAL EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.GREATER_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESSION ::= EXPRESSION LTGT EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.NOT_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESSION ::= CALL_TO_METHOD 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESSION ::= OPENPAR EXPRESSION CLOSEPAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PParser$do_action(
    int                        CUP$PParser$act_num,
    java_cup.runtime.lr_parser CUP$PParser$parser,
    java.util.Stack            CUP$PParser$stack,
    int                        CUP$PParser$top)
    throws java.lang.Exception
    {
              return CUP$PParser$do_action_part00000000(
                               CUP$PParser$act_num,
                               CUP$PParser$parser,
                               CUP$PParser$stack,
                               CUP$PParser$top);
    }
}

}
