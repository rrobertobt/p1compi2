
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.p1compi2.analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import edu.robertob.p1compi2.engine.structs.*;
import edu.robertob.p1compi2.engine.base.*;
import edu.robertob.p1compi2.engine.statements.*;
import edu.robertob.p1compi2.engine.expressions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public PParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\263\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\003\006\000\002\003\006" +
    "\000\002\003\005\000\002\070\004\000\002\070\003\000" +
    "\002\067\003\000\002\067\003\000\002\004\006\000\002" +
    "\007\005\000\002\006\004\000\002\006\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\010\004\000\002\010\002\000\002\011" +
    "\003\000\002\011\004\000\002\011\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\015\003\000\002\015\004" +
    "\000\002\016\006\000\002\014\010\000\002\014\011\000" +
    "\002\014\010\000\002\014\011\000\002\017\005\000\002" +
    "\022\005\000\002\020\003\000\002\020\004\000\002\020" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\006\000\002\023\004\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\024\002\000\002" +
    "\026\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\027\004\000\002\027\002\000\002\030\005\000" +
    "\002\030\003\000\002\030\002\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\040\006\000\002\033\011\000\002\041\011" +
    "\000\002\041\013\000\002\041\013\000\002\041\015\000" +
    "\002\041\017\000\002\041\015\000\002\041\012\000\002" +
    "\041\014\000\002\041\014\000\002\041\016\000\002\041" +
    "\020\000\002\041\016\000\002\042\004\000\002\042\003" +
    "\000\002\043\011\000\002\043\013\000\002\046\013\000" +
    "\002\046\012\000\002\047\004\000\002\047\003\000\002" +
    "\050\006\000\002\050\007\000\002\051\005\000\002\051" +
    "\003\000\002\052\005\000\002\052\006\000\002\054\011" +
    "\000\002\054\013\000\002\055\007\000\002\056\014\000" +
    "\002\056\014\000\002\056\016\000\002\056\016\000\002" +
    "\060\012\000\002\060\012\000\002\060\007\000\002\057" +
    "\010\000\002\064\010\000\002\063\010\000\002\061\005" +
    "\000\002\061\003\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\006\000\002" +
    "\062\006\000\002\062\006\000\002\062\006\000\002\071" +
    "\006\000\002\072\005\000\002\072\003\000\002\072\002" +
    "\000\002\073\003\000\002\065\006\000\002\066\006\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\004\000" +
    "\002\035\004\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\006\000\002\035\003\000" +
    "\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\004\034\004\001\002\000\004\066\u017e\001" +
    "\002\000\010\006\015\020\012\033\014\001\002\000\004" +
    "\002\011\001\002\000\006\002\uffff\125\010\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\066\u0172\001\002\000\012\006\uffd9\010\uffd9\042\024\044" +
    "\uffd9\001\002\000\004\066\u0158\001\002\000\030\007\045" +
    "\015\u0155\017\047\022\042\036\034\045\031\060\044\061" +
    "\040\062\027\063\037\066\041\001\002\000\010\006\u0151" +
    "\020\012\033\014\001\002\000\012\006\uffd9\010\uffd9\042" +
    "\024\044\uffd9\001\002\000\010\006\ufff8\020\ufff8\033\ufff8" +
    "\001\002\000\010\006\ufff9\020\ufff9\033\ufff9\001\002\000" +
    "\010\006\ufff7\020\ufff7\033\ufff7\001\002\000\014\006\uffb8" +
    "\010\u0134\020\uffb8\033\uffb8\044\uffb8\001\002\000\004\066" +
    "\375\001\002\000\004\006\026\001\002\000\026\007\045" +
    "\017\047\022\042\036\034\045\031\060\044\061\040\062" +
    "\027\063\037\066\041\001\002\000\004\114\372\001\002" +
    "\000\004\122\371\001\002\000\004\114\357\001\002\000" +
    "\032\007\uffef\015\uffef\017\uffef\022\uffef\036\uffef\043\uffef" +
    "\045\uffef\060\uffef\061\uffef\062\uffef\063\uffef\066\uffef\001" +
    "\002\000\032\007\ufff0\015\ufff0\017\ufff0\022\ufff0\036\ufff0" +
    "\043\ufff0\045\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\066" +
    "\ufff0\001\002\000\026\007\045\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\032\007\ufff3\015\ufff3\017\ufff3\022\ufff3\036\ufff3" +
    "\043\ufff3\045\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\001\002\000\032\007\uffed\015\uffed\017\uffed\022\uffed" +
    "\036\uffed\043\uffed\045\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\066\uffed\001\002\000\004\114\350\001\002\000\004" +
    "\122\347\001\002\000\010\104\337\114\177\123\336\001" +
    "\002\000\004\114\251\001\002\000\004\122\250\001\002" +
    "\000\004\122\247\001\002\000\004\114\213\001\002\000" +
    "\004\122\212\001\002\000\004\066\062\001\002\000\004" +
    "\122\061\001\002\000\030\007\045\015\056\017\047\022" +
    "\042\036\034\045\031\060\044\061\040\062\027\063\037" +
    "\066\041\001\002\000\032\007\uffee\015\uffee\017\uffee\022" +
    "\uffee\036\uffee\043\uffee\045\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\066\uffee\001\002\000\032\007\uffe9\015\uffe9\017" +
    "\uffe9\022\uffe9\036\uffe9\043\uffe9\045\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\066\uffe9\001\002\000\004\122\055\001" +
    "\002\000\032\007\ufff1\015\ufff1\017\ufff1\022\ufff1\036\ufff1" +
    "\043\ufff1\045\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\066" +
    "\ufff1\001\002\000\004\122\060\001\002\000\032\007\ufff4" +
    "\015\ufff4\017\ufff4\022\ufff4\036\ufff4\043\ufff4\045\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\063\ufff4\066\ufff4\001\002\000\010" +
    "\006\uff7b\020\uff7b\033\uff7b\001\002\000\032\007\uffe7\015" +
    "\uffe7\017\uffe7\022\uffe7\036\uffe7\043\uffe7\045\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\066\uffe7\001\002\000\004\104" +
    "\063\001\002\000\004\074\064\001\002\000\026\027\076" +
    "\047\073\050\067\065\074\066\075\067\070\070\066\071" +
    "\100\073\065\114\072\001\002\000\026\027\076\047\073" +
    "\050\067\065\074\066\075\067\070\070\066\071\100\073" +
    "\065\114\072\001\002\000\062\004\uff67\011\uff67\012\uff67" +
    "\013\uff67\014\uff67\025\uff67\031\uff67\041\uff67\056\uff67\057" +
    "\uff67\072\uff67\073\uff67\074\uff67\077\uff67\104\uff67\106\uff67" +
    "\107\uff67\110\uff67\111\uff67\113\uff67\115\uff67\121\uff67\122" +
    "\uff67\124\uff67\001\002\000\062\004\uff63\011\uff63\012\uff63" +
    "\013\uff63\014\uff63\025\uff63\031\uff63\041\uff63\056\uff63\057" +
    "\uff63\072\uff63\073\uff63\074\uff63\077\uff63\104\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\113\uff63\115\uff63\121\uff63\122" +
    "\uff63\124\uff63\001\002\000\062\004\uff68\011\uff68\012\uff68" +
    "\013\uff68\014\uff68\025\uff68\031\uff68\041\uff68\056\uff68\057" +
    "\uff68\072\uff68\073\uff68\074\uff68\077\uff68\104\uff68\106\uff68" +
    "\107\uff68\110\uff68\111\uff68\113\uff68\115\uff68\121\uff68\122" +
    "\uff68\124\uff68\001\002\000\062\004\uff50\011\uff50\012\uff50" +
    "\013\uff50\014\uff50\025\uff50\031\uff50\041\uff50\056\uff50\057" +
    "\uff50\072\uff50\073\uff50\074\uff50\077\uff50\104\uff50\106\uff50" +
    "\107\uff50\110\uff50\111\uff50\113\uff50\115\uff50\121\uff50\122" +
    "\uff50\124\uff50\001\002\000\026\027\076\047\073\050\067" +
    "\065\074\066\075\067\070\070\066\071\100\073\065\114" +
    "\072\001\002\000\062\004\uff64\011\uff64\012\uff64\013\uff64" +
    "\014\uff64\025\uff64\031\uff64\041\uff64\056\uff64\057\uff64\072" +
    "\uff64\073\uff64\074\uff64\077\uff64\104\uff64\106\uff64\107\uff64" +
    "\110\uff64\111\uff64\113\uff64\115\uff64\121\uff64\122\uff64\124" +
    "\uff64\001\002\000\062\004\uff65\011\uff65\012\uff65\013\uff65" +
    "\014\uff65\025\uff65\031\uff65\041\uff65\056\uff65\057\uff65\072" +
    "\uff65\073\uff65\074\uff65\077\uff65\104\uff65\106\uff65\107\uff65" +
    "\110\uff65\111\uff65\113\uff65\115\uff65\121\uff65\122\uff65\124" +
    "\uff65\001\002\000\066\004\uff69\011\uff69\012\uff69\013\uff69" +
    "\014\uff69\025\uff69\031\uff69\041\uff69\056\uff69\057\uff69\072" +
    "\uff69\073\uff69\074\uff69\077\uff69\104\uff69\106\uff69\107\uff69" +
    "\110\uff69\111\uff69\113\uff69\114\177\115\uff69\121\uff69\122" +
    "\uff69\123\176\124\uff69\001\002\000\026\027\076\047\073" +
    "\050\067\065\074\066\075\067\070\070\066\071\100\073" +
    "\065\114\072\001\002\000\044\004\120\011\110\013\117" +
    "\025\103\031\114\041\104\056\121\057\113\072\107\073" +
    "\101\074\116\077\111\106\112\107\106\110\105\111\115" +
    "\113\102\001\002\000\062\004\uff66\011\uff66\012\uff66\013" +
    "\uff66\014\uff66\025\uff66\031\uff66\041\uff66\056\uff66\057\uff66" +
    "\072\uff66\073\uff66\074\uff66\077\uff66\104\uff66\106\uff66\107" +
    "\uff66\110\uff66\111\uff66\113\uff66\115\uff66\121\uff66\122\uff66" +
    "\124\uff66\001\002\000\026\027\076\047\073\050\067\065" +
    "\074\066\075\067\070\070\066\071\100\073\065\114\072" +
    "\001\002\000\026\027\076\047\073\050\067\065\074\066" +
    "\075\067\070\070\066\071\100\073\065\114\072\001\002" +
    "\000\026\027\076\047\073\050\067\065\074\066\075\067" +
    "\070\070\066\071\100\073\065\114\072\001\002\000\026" +
    "\027\076\047\073\050\067\065\074\066\075\067\070\070" +
    "\066\071\100\073\065\114\072\001\002\000\026\027\076" +
    "\047\073\050\067\065\074\066\075\067\070\070\066\071" +
    "\100\073\065\114\072\001\002\000\026\027\076\047\073" +
    "\050\067\065\074\066\075\067\070\070\066\071\100\073" +
    "\065\114\072\001\002\000\026\027\076\047\073\050\067" +
    "\065\074\066\075\067\070\070\066\071\100\073\065\114" +
    "\072\001\002\000\026\027\076\047\073\050\067\065\074" +
    "\066\075\067\070\070\066\071\100\073\065\114\072\001" +
    "\002\000\026\027\076\047\073\050\067\065\074\066\075" +
    "\067\070\070\066\071\100\073\065\114\072\001\002\000" +
    "\026\027\076\047\073\050\067\065\074\066\075\067\070" +
    "\070\066\071\100\073\065\114\072\001\002\000\026\027" +
    "\076\047\073\050\067\065\074\066\075\067\070\070\066" +
    "\071\100\073\065\114\072\001\002\000\026\027\076\047" +
    "\073\050\067\065\074\066\075\067\070\070\066\071\100" +
    "\073\065\114\072\001\002\000\026\027\076\047\073\050" +
    "\067\065\074\066\075\067\070\070\066\071\100\073\065" +
    "\114\072\001\002\000\026\027\076\047\073\050\067\065" +
    "\074\066\075\067\070\070\066\071\100\073\065\114\072" +
    "\001\002\000\026\027\076\047\073\050\067\065\074\066" +
    "\075\067\070\070\066\071\100\073\065\114\072\001\002" +
    "\000\026\027\076\047\073\050\067\065\074\066\075\067" +
    "\070\070\066\071\100\073\065\114\072\001\002\000\026" +
    "\027\076\047\073\050\067\065\074\066\075\067\070\070" +
    "\066\071\100\073\065\114\072\001\002\000\062\004\120" +
    "\011\110\012\uff59\013\uff59\014\uff59\025\103\031\114\041" +
    "\uff59\056\uff59\057\uff59\072\107\073\101\074\116\077\111" +
    "\104\uff59\106\112\107\106\110\105\111\115\113\102\115" +
    "\uff59\121\uff59\122\uff59\124\uff59\001\002\000\062\004\uff5b" +
    "\011\110\012\uff5b\013\uff5b\014\uff5b\025\103\031\uff5b\041" +
    "\uff5b\056\uff5b\057\uff5b\072\107\073\101\074\116\077\111" +
    "\104\uff5b\106\112\107\106\110\105\111\115\113\102\115" +
    "\uff5b\121\uff5b\122\uff5b\124\uff5b\001\002\000\042\004\120" +
    "\011\110\012\125\025\103\031\114\056\121\057\113\072" +
    "\107\073\101\074\116\077\111\106\112\107\106\110\105" +
    "\111\115\113\102\001\002\000\030\006\133\007\045\017" +
    "\047\022\042\036\034\045\031\060\135\061\132\062\027" +
    "\063\037\066\041\001\002\000\006\014\uffdc\122\uffdc\001" +
    "\002\000\006\014\uffe2\122\uffe2\001\002\000\006\014\uffe4" +
    "\122\uffe4\001\002\000\006\014\uffe0\122\uffe0\001\002\000" +
    "\006\014\uffde\122\uffde\001\002\000\026\007\045\017\047" +
    "\022\042\036\034\045\031\060\044\061\040\062\027\063" +
    "\037\066\041\001\002\000\006\014\uffdd\122\uffdd\001\002" +
    "\000\006\014\uffdf\122\uffdf\001\002\000\006\014\uffe6\122" +
    "\uffe6\001\002\000\006\014\uffdb\122\uffdb\001\002\000\004" +
    "\122\144\001\002\000\006\014\uffe1\122\uffe1\001\002\000" +
    "\006\014\uffe3\122\uffe3\001\002\000\006\014\uffe5\122\uffe5" +
    "\001\002\000\036\007\uff83\014\uff83\015\uff83\017\uff83\022" +
    "\uff83\036\uff83\043\uff83\045\uff83\060\uff83\061\uff83\062\uff83" +
    "\063\uff83\066\uff83\122\uff83\001\002\000\030\007\045\015" +
    "\146\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\004\122\147\001" +
    "\002\000\036\007\uff81\014\uff81\015\uff81\017\uff81\022\uff81" +
    "\036\uff81\043\uff81\045\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\066\uff81\122\uff81\001\002\000\062\004\uff57\011\110" +
    "\012\uff57\013\uff57\014\uff57\025\103\031\uff57\041\uff57\056" +
    "\uff57\057\uff57\072\107\073\101\074\uff57\077\111\104\uff57" +
    "\106\uff57\107\uff57\110\uff57\111\uff57\113\uff57\115\uff57\121" +
    "\uff57\122\uff57\124\uff57\001\002\000\062\004\uff53\011\110" +
    "\012\uff53\013\uff53\014\uff53\025\103\031\uff53\041\uff53\056" +
    "\uff53\057\uff53\072\107\073\101\074\uff53\077\111\104\uff53" +
    "\106\uff53\107\uff53\110\uff53\111\uff53\113\uff53\115\uff53\121" +
    "\uff53\122\uff53\124\uff53\001\002\000\062\004\120\011\110" +
    "\012\uff5a\013\uff5a\014\uff5a\025\103\031\uff5a\041\uff5a\056" +
    "\uff5a\057\uff5a\072\107\073\101\074\116\077\111\104\uff5a" +
    "\106\112\107\106\110\105\111\115\113\102\115\uff5a\121" +
    "\uff5a\122\uff5a\124\uff5a\001\002\000\062\004\120\011\110" +
    "\012\uff58\013\uff58\014\uff58\025\103\031\114\041\uff58\056" +
    "\uff58\057\uff58\072\107\073\101\074\116\077\111\104\uff58" +
    "\106\112\107\106\110\105\111\115\113\102\115\uff58\121" +
    "\uff58\122\uff58\124\uff58\001\002\000\062\004\uff56\011\110" +
    "\012\uff56\013\uff56\014\uff56\025\103\031\uff56\041\uff56\056" +
    "\uff56\057\uff56\072\107\073\101\074\uff56\077\111\104\uff56" +
    "\106\uff56\107\uff56\110\uff56\111\uff56\113\uff56\115\uff56\121" +
    "\uff56\122\uff56\124\uff56\001\002\000\062\004\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\025\uff60\031\uff60\041\uff60\056" +
    "\uff60\057\uff60\072\uff60\073\uff60\074\uff60\077\uff60\104\uff60" +
    "\106\uff60\107\uff60\110\uff60\111\uff60\113\uff60\115\uff60\121" +
    "\uff60\122\uff60\124\uff60\001\002\000\062\004\uff5f\011\uff5f" +
    "\012\uff5f\013\uff5f\014\uff5f\025\uff5f\031\uff5f\041\uff5f\056" +
    "\uff5f\057\uff5f\072\uff5f\073\uff5f\074\uff5f\077\uff5f\104\uff5f" +
    "\106\uff5f\107\uff5f\110\uff5f\111\uff5f\113\uff5f\115\uff5f\121" +
    "\uff5f\122\uff5f\124\uff5f\001\002\000\062\004\uff62\011\110" +
    "\012\uff62\013\uff62\014\uff62\025\103\031\uff62\041\uff62\056" +
    "\uff62\057\uff62\072\uff62\073\uff62\074\uff62\077\111\104\uff62" +
    "\106\uff62\107\uff62\110\uff62\111\uff62\113\uff62\115\uff62\121" +
    "\uff62\122\uff62\124\uff62\001\002\000\062\004\uff55\011\110" +
    "\012\uff55\013\uff55\014\uff55\025\103\031\uff55\041\uff55\056" +
    "\uff55\057\uff55\072\107\073\101\074\uff55\077\111\104\uff55" +
    "\106\uff55\107\uff55\110\uff55\111\uff55\113\uff55\115\uff55\121" +
    "\uff55\122\uff55\124\uff55\001\002\000\062\004\uff54\011\110" +
    "\012\uff54\013\uff54\014\uff54\025\103\031\uff54\041\uff54\056" +
    "\uff54\057\uff54\072\107\073\101\074\uff54\077\111\104\uff54" +
    "\106\uff54\107\uff54\110\uff54\111\uff54\113\uff54\115\uff54\121" +
    "\uff54\122\uff54\124\uff54\001\002\000\042\004\120\011\110" +
    "\012\163\025\103\031\114\056\121\057\113\072\107\073" +
    "\101\074\116\077\111\106\112\107\106\110\105\111\115" +
    "\113\102\001\002\000\030\006\164\007\045\017\047\022" +
    "\042\036\034\045\031\060\135\061\132\062\027\063\037" +
    "\066\041\001\002\000\026\007\045\017\047\022\042\036" +
    "\034\045\031\060\044\061\040\062\027\063\037\066\041" +
    "\001\002\000\004\122\166\001\002\000\036\007\uff84\014" +
    "\uff84\015\uff84\017\uff84\022\uff84\036\uff84\043\uff84\045\uff84" +
    "\060\uff84\061\uff84\062\uff84\063\uff84\066\uff84\122\uff84\001" +
    "\002\000\030\007\045\015\170\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\122\171\001\002\000\036\007\uff82\014\uff82" +
    "\015\uff82\017\uff82\022\uff82\036\uff82\043\uff82\045\uff82\060" +
    "\uff82\061\uff82\062\uff82\063\uff82\066\uff82\122\uff82\001\002" +
    "\000\062\004\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\025" +
    "\uff5e\031\uff5e\041\uff5e\056\uff5e\057\uff5e\072\uff5e\073\uff5e" +
    "\074\uff5e\077\uff5e\104\uff5e\106\uff5e\107\uff5e\110\uff5e\111" +
    "\uff5e\113\uff5e\115\uff5e\121\uff5e\122\uff5e\124\uff5e\001\002" +
    "\000\062\004\uff52\011\110\012\uff52\013\uff52\014\uff52\025" +
    "\103\031\uff52\041\uff52\056\uff52\057\uff52\072\107\073\101" +
    "\074\uff52\077\111\104\uff52\106\uff52\107\uff52\110\uff52\111" +
    "\uff52\113\uff52\115\uff52\121\uff52\122\uff52\124\uff52\001\002" +
    "\000\062\004\uff61\011\110\012\uff61\013\uff61\014\uff61\025" +
    "\103\031\uff61\041\uff61\056\uff61\057\uff61\072\uff61\073\uff61" +
    "\074\uff61\077\111\104\uff61\106\uff61\107\uff61\110\uff61\111" +
    "\uff61\113\uff61\115\uff61\121\uff61\122\uff61\124\uff61\001\002" +
    "\000\062\004\uff5c\011\110\012\uff5c\013\uff5c\014\uff5c\025" +
    "\103\031\uff5c\041\uff5c\056\uff5c\057\uff5c\072\107\073\101" +
    "\074\116\077\111\104\uff5c\106\112\107\106\110\105\111" +
    "\115\113\102\115\uff5c\121\uff5c\122\uff5c\124\uff5c\001\002" +
    "\000\026\027\076\047\073\050\067\065\074\066\075\067" +
    "\070\070\066\071\100\073\065\114\072\001\002\000\032" +
    "\027\076\047\073\050\067\065\074\066\075\067\070\070" +
    "\066\071\100\073\065\114\072\115\uff6d\121\uff6d\001\002" +
    "\000\006\115\203\121\202\001\002\000\044\004\120\011" +
    "\110\025\103\031\114\056\121\057\113\072\107\073\101" +
    "\074\116\077\111\106\112\107\106\110\105\111\115\113" +
    "\102\115\uff6e\121\uff6e\001\002\000\026\027\076\047\073" +
    "\050\067\065\074\066\075\067\070\070\066\071\100\073" +
    "\065\114\072\001\002\000\062\004\uff70\011\uff70\012\uff70" +
    "\013\uff70\014\uff70\025\uff70\031\uff70\041\uff70\056\uff70\057" +
    "\uff70\072\uff70\073\uff70\074\uff70\077\uff70\104\uff70\106\uff70" +
    "\107\uff70\110\uff70\111\uff70\113\uff70\115\uff70\121\uff70\122" +
    "\uff70\124\uff70\001\002\000\044\004\120\011\110\025\103" +
    "\031\114\056\121\057\113\072\107\073\101\074\116\077" +
    "\111\106\112\107\106\110\105\111\115\113\102\115\uff6f" +
    "\121\uff6f\001\002\000\042\004\120\011\110\025\103\031" +
    "\114\056\121\057\113\072\107\073\101\074\116\077\111" +
    "\106\112\107\106\110\105\111\115\113\102\124\206\001" +
    "\002\000\062\004\uff51\011\uff51\012\uff51\013\uff51\014\uff51" +
    "\025\uff51\031\uff51\041\uff51\056\uff51\057\uff51\072\uff51\073" +
    "\uff51\074\uff51\077\uff51\104\uff51\106\uff51\107\uff51\110\uff51" +
    "\111\uff51\113\uff51\115\uff51\121\uff51\122\uff51\124\uff51\001" +
    "\002\000\042\004\120\011\110\025\103\031\114\056\121" +
    "\057\113\072\107\073\101\074\116\077\111\106\112\107" +
    "\106\110\105\111\115\113\102\115\210\001\002\000\062" +
    "\004\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\025\uff4f\031" +
    "\uff4f\041\uff4f\056\uff4f\057\uff4f\072\uff4f\073\uff4f\074\uff4f" +
    "\077\uff4f\104\uff4f\106\uff4f\107\uff4f\110\uff4f\111\uff4f\113" +
    "\uff4f\115\uff4f\121\uff4f\122\uff4f\124\uff4f\001\002\000\062" +
    "\004\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\025\uff5d\031" +
    "\uff5d\041\uff5d\056\uff5d\057\uff5d\072\uff5d\073\uff5d\074\uff5d" +
    "\077\uff5d\104\uff5d\106\uff5d\107\uff5d\110\uff5d\111\uff5d\113" +
    "\uff5d\115\uff5d\121\uff5d\122\uff5d\124\uff5d\001\002\000\032" +
    "\007\ufff2\015\ufff2\017\ufff2\022\ufff2\036\ufff2\043\ufff2\045" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\066\ufff2\001\002" +
    "\000\026\027\076\047\073\050\067\065\074\066\075\067" +
    "\070\070\066\071\100\073\065\114\072\001\002\000\042" +
    "\004\120\011\110\025\103\031\114\056\121\057\113\072" +
    "\107\073\101\074\116\077\111\106\112\107\106\110\105" +
    "\111\115\113\102\115\215\001\002\000\004\030\216\001" +
    "\002\000\026\027\076\047\073\050\067\065\074\066\075" +
    "\067\070\070\066\071\100\073\065\114\072\001\002\000" +
    "\006\104\240\121\237\001\002\000\032\014\223\015\224" +
    "\027\076\047\073\050\067\065\074\066\075\067\070\070" +
    "\066\071\100\073\065\114\072\001\002\000\044\004\120" +
    "\011\110\025\103\031\114\056\121\057\113\072\107\073" +
    "\101\074\116\077\111\104\uff8a\106\112\107\106\110\105" +
    "\111\115\113\102\121\uff8a\001\002\000\032\014\uff8e\015" +
    "\uff8e\027\uff8e\047\uff8e\050\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\070\uff8e\071\uff8e\073\uff8e\114\uff8e\001\002\000\030\006" +
    "\232\007\045\017\047\022\042\036\034\045\031\060\135" +
    "\061\132\062\027\063\037\066\041\001\002\000\004\122" +
    "\231\001\002\000\004\015\227\001\002\000\032\014\uff8f" +
    "\015\uff8f\027\uff8f\047\uff8f\050\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\071\uff8f\073\uff8f\114\uff8f\001\002\000\004" +
    "\122\230\001\002\000\036\007\uff91\014\uff91\015\uff91\017" +
    "\uff91\022\uff91\036\uff91\043\uff91\045\uff91\060\uff91\061\uff91" +
    "\062\uff91\063\uff91\066\uff91\122\uff91\001\002\000\036\007" +
    "\uff90\014\uff90\015\uff90\017\uff90\022\uff90\036\uff90\043\uff90" +
    "\045\uff90\060\uff90\061\uff90\062\uff90\063\uff90\066\uff90\122" +
    "\uff90\001\002\000\026\007\045\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\122\234\001\002\000\004\015\uff89\001\002" +
    "\000\030\007\045\015\236\017\047\022\042\036\034\045" +
    "\031\060\044\061\040\062\027\063\037\066\041\001\002" +
    "\000\004\015\uff88\001\002\000\026\027\076\047\073\050" +
    "\067\065\074\066\075\067\070\070\066\071\100\073\065" +
    "\114\072\001\002\000\030\006\241\007\045\017\047\022" +
    "\042\036\034\045\031\060\135\061\132\062\027\063\037" +
    "\066\041\001\002\000\026\007\045\017\047\022\042\036" +
    "\034\045\031\060\044\061\040\062\027\063\037\066\041" +
    "\001\002\000\004\122\243\001\002\000\032\014\uff8d\015" +
    "\uff8d\027\uff8d\047\uff8d\050\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\073\uff8d\114\uff8d\001\002\000\030\007" +
    "\045\015\245\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\032\014" +
    "\uff8c\015\uff8c\027\uff8c\047\uff8c\050\uff8c\065\uff8c\066\uff8c" +
    "\067\uff8c\070\uff8c\071\uff8c\073\uff8c\114\uff8c\001\002\000" +
    "\044\004\120\011\110\025\103\031\114\056\121\057\113" +
    "\072\107\073\101\074\116\077\111\104\uff8b\106\112\107" +
    "\106\110\105\111\115\113\102\121\uff8b\001\002\000\032" +
    "\007\uffec\015\uffec\017\uffec\022\uffec\036\uffec\043\uffec\045" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\066\uffec\001\002" +
    "\000\032\007\uffea\015\uffea\017\uffea\022\uffea\036\uffea\043" +
    "\uffea\045\uffea\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea" +
    "\001\002\000\026\027\076\047\073\050\067\065\074\066" +
    "\075\067\070\070\066\071\100\073\065\114\072\001\002" +
    "\000\042\004\120\011\110\025\103\031\114\056\121\057" +
    "\113\072\107\073\101\074\116\077\111\106\112\107\106" +
    "\110\105\111\115\113\102\115\253\001\002\000\004\040" +
    "\254\001\002\000\030\006\255\007\045\017\047\022\042" +
    "\036\034\045\031\060\135\061\132\062\027\063\037\066" +
    "\041\001\002\000\026\007\045\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\006\014\260\122\257\001\002\000\036\007\uffa1" +
    "\014\uffa1\015\uffa1\017\uffa1\022\uffa1\036\uffa1\043\uffa1\045" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\066\uffa1\122\uffa1" +
    "\001\002\000\030\006\326\007\045\017\047\022\267\036" +
    "\034\045\031\060\135\061\132\062\027\063\037\066\041" +
    "\001\002\000\006\014\264\122\263\001\002\000\006\014" +
    "\uff94\122\uff94\001\002\000\036\007\uff9b\014\uff9b\015\uff9b" +
    "\017\uff9b\022\uff9b\036\uff9b\043\uff9b\045\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\066\uff9b\122\uff9b\001\002\000\030" +
    "\006\266\007\045\017\047\022\267\036\034\045\031\060" +
    "\135\061\132\062\027\063\037\066\041\001\002\000\006" +
    "\014\uff95\122\uff95\001\002\000\026\007\045\017\047\022" +
    "\042\036\034\045\031\060\044\061\040\062\027\063\037" +
    "\066\041\001\002\000\004\114\272\001\002\000\004\122" +
    "\271\001\002\000\036\007\uff99\014\uff99\015\uff99\017\uff99" +
    "\022\uff99\036\uff99\043\uff99\045\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\066\uff99\122\uff99\001\002\000\026\027\076" +
    "\047\073\050\067\065\074\066\075\067\070\070\066\071" +
    "\100\073\065\114\072\001\002\000\042\004\120\011\110" +
    "\025\103\031\114\056\121\057\113\072\107\073\101\074" +
    "\116\077\111\106\112\107\106\110\105\111\115\113\102" +
    "\115\274\001\002\000\004\040\275\001\002\000\030\006" +
    "\276\007\045\017\047\022\042\036\034\045\031\060\135" +
    "\061\132\062\027\063\037\066\041\001\002\000\026\007" +
    "\045\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\006\014\uff93\122" +
    "\uff93\001\002\000\030\007\045\015\301\017\047\022\042" +
    "\036\034\045\031\060\044\061\040\062\027\063\037\066" +
    "\041\001\002\000\006\014\uff92\122\uff92\001\002\000\036" +
    "\007\uffa0\014\uffa0\015\uffa0\017\uffa0\022\uffa0\036\uffa0\043" +
    "\uffa0\045\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\066\uffa0" +
    "\122\uffa0\001\002\000\030\006\315\007\045\017\047\022" +
    "\267\036\034\045\031\060\135\061\132\062\027\063\037" +
    "\066\041\001\002\000\006\014\306\122\305\001\002\000" +
    "\036\007\uff9a\014\uff9a\015\uff9a\017\uff9a\022\uff9a\036\uff9a" +
    "\043\uff9a\045\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\066" +
    "\uff9a\122\uff9a\001\002\000\030\006\307\007\045\017\047" +
    "\022\267\036\034\045\031\060\135\061\132\062\027\063" +
    "\037\066\041\001\002\000\026\007\045\017\047\022\042" +
    "\036\034\045\031\060\044\061\040\062\027\063\037\066" +
    "\041\001\002\000\004\122\311\001\002\000\036\007\uff98" +
    "\014\uff98\015\uff98\017\uff98\022\uff98\036\uff98\043\uff98\045" +
    "\uff98\060\uff98\061\uff98\062\uff98\063\uff98\066\uff98\122\uff98" +
    "\001\002\000\030\007\045\015\313\017\047\022\042\036" +
    "\034\045\031\060\044\061\040\062\027\063\037\066\041" +
    "\001\002\000\004\122\314\001\002\000\036\007\uff97\014" +
    "\uff97\015\uff97\017\uff97\022\uff97\036\uff97\043\uff97\045\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\066\uff97\122\uff97\001" +
    "\002\000\026\007\045\017\047\022\042\036\034\045\031" +
    "\060\044\061\040\062\027\063\037\066\041\001\002\000" +
    "\004\122\317\001\002\000\036\007\uff9e\014\uff9e\015\uff9e" +
    "\017\uff9e\022\uff9e\036\uff9e\043\uff9e\045\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\066\uff9e\122\uff9e\001\002\000\030" +
    "\007\045\015\321\017\047\022\042\036\034\045\031\060" +
    "\044\061\040\062\027\063\037\066\041\001\002\000\004" +
    "\122\322\001\002\000\036\007\uff9d\014\uff9d\015\uff9d\017" +
    "\uff9d\022\uff9d\036\uff9d\043\uff9d\045\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\066\uff9d\122\uff9d\001\002\000\030\007" +
    "\045\015\324\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\004\122" +
    "\325\001\002\000\036\007\uff96\014\uff96\015\uff96\017\uff96" +
    "\022\uff96\036\uff96\043\uff96\045\uff96\060\uff96\061\uff96\062" +
    "\uff96\063\uff96\066\uff96\122\uff96\001\002\000\026\007\045" +
    "\017\047\022\042\036\034\045\031\060\044\061\040\062" +
    "\027\063\037\066\041\001\002\000\004\122\330\001\002" +
    "\000\036\007\uff9f\014\uff9f\015\uff9f\017\uff9f\022\uff9f\036" +
    "\uff9f\043\uff9f\045\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\066\uff9f\122\uff9f\001\002\000\030\007\045\015\332\017" +
    "\047\022\042\036\034\045\031\060\044\061\040\062\027" +
    "\063\037\066\041\001\002\000\004\122\333\001\002\000" +
    "\036\007\uff9c\014\uff9c\015\uff9c\017\uff9c\022\uff9c\036\uff9c" +
    "\043\uff9c\045\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\066" +
    "\uff9c\122\uff9c\001\002\000\030\007\045\015\335\017\047" +
    "\022\042\036\034\045\031\060\044\061\040\062\027\063" +
    "\037\066\041\001\002\000\006\014\303\122\302\001\002" +
    "\000\026\027\076\047\073\050\067\065\074\066\075\067" +
    "\070\070\066\071\100\073\065\114\072\001\002\000\004" +
    "\074\340\001\002\000\026\027\076\047\073\050\067\065" +
    "\074\066\075\067\070\070\066\071\100\073\065\114\072" +
    "\001\002\000\044\004\120\011\110\014\uffa3\025\103\031" +
    "\114\056\121\057\113\072\107\073\101\074\116\077\111" +
    "\106\112\107\106\110\105\111\115\113\102\122\uffa3\001" +
    "\002\000\042\004\120\011\110\025\103\031\114\056\121" +
    "\057\113\072\107\073\101\074\116\077\111\106\112\107" +
    "\106\110\105\111\115\113\102\124\343\001\002\000\004" +
    "\104\344\001\002\000\004\074\345\001\002\000\026\027" +
    "\076\047\073\050\067\065\074\066\075\067\070\070\066" +
    "\071\100\073\065\114\072\001\002\000\044\004\120\011" +
    "\110\014\uffa2\025\103\031\114\056\121\057\113\072\107" +
    "\073\101\074\116\077\111\106\112\107\106\110\105\111" +
    "\115\113\102\122\uffa2\001\002\000\032\007\uffeb\015\uffeb" +
    "\017\uffeb\022\uffeb\036\uffeb\043\uffeb\045\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\066\uffeb\001\002\000\032\027\076" +
    "\047\073\050\067\065\074\066\075\067\070\070\066\071" +
    "\100\073\065\114\072\115\uff6d\121\uff6d\001\002\000\006" +
    "\115\352\121\202\001\002\000\006\014\uff6a\122\uff6a\001" +
    "\002\000\030\007\045\017\047\022\042\036\034\043\354" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\026\027\076\047\073\050\067\065\074\066\075" +
    "\067\070\070\066\071\100\073\065\114\072\001\002\000" +
    "\042\004\120\011\110\025\103\031\114\056\121\057\113" +
    "\072\107\073\101\074\116\077\111\106\112\107\106\110" +
    "\105\111\115\113\102\122\356\001\002\000\036\007\uff85" +
    "\014\uff85\015\uff85\017\uff85\022\uff85\036\uff85\043\uff85\045" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\066\uff85\122\uff85" +
    "\001\002\000\026\027\076\047\073\050\067\065\074\066" +
    "\075\067\070\070\066\071\100\073\065\114\072\001\002" +
    "\000\042\004\120\011\110\025\103\031\114\056\121\057" +
    "\113\072\107\073\101\074\116\077\111\106\112\107\106" +
    "\110\105\111\115\113\102\115\361\001\002\000\004\012" +
    "\362\001\002\000\030\006\363\007\045\017\047\022\042" +
    "\036\034\045\031\060\135\061\132\062\027\063\037\066" +
    "\041\001\002\000\026\007\045\017\047\022\042\036\034" +
    "\045\031\060\044\061\040\062\027\063\037\066\041\001" +
    "\002\000\004\122\365\001\002\000\036\007\uff87\014\uff87" +
    "\015\uff87\017\uff87\022\uff87\036\uff87\043\uff87\045\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\066\uff87\122\uff87\001\002" +
    "\000\030\007\045\015\367\017\047\022\042\036\034\045" +
    "\031\060\044\061\040\062\027\063\037\066\041\001\002" +
    "\000\004\122\370\001\002\000\036\007\uff86\014\uff86\015" +
    "\uff86\017\uff86\022\uff86\036\uff86\043\uff86\045\uff86\060\uff86" +
    "\061\uff86\062\uff86\063\uff86\066\uff86\122\uff86\001\002\000" +
    "\032\007\uffe8\015\uffe8\017\uffe8\022\uffe8\036\uffe8\043\uffe8" +
    "\045\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\066\uffe8\001" +
    "\002\000\032\027\076\047\073\050\067\065\074\066\075" +
    "\067\070\070\066\071\100\073\065\114\072\115\uff6d\121" +
    "\uff6d\001\002\000\006\115\374\121\202\001\002\000\006" +
    "\014\uff6b\122\uff6b\001\002\000\010\074\uffcf\104\uffcf\121" +
    "\uffcf\001\002\000\014\006\uffda\010\uffda\020\uffda\033\uffda" +
    "\044\uffda\001\002\000\016\006\uffd1\010\uffd1\020\uffd1\033" +
    "\uffd1\044\uffd1\122\uffd1\001\002\000\016\006\uffd8\010\uffd8" +
    "\020\uffd8\033\uffd8\044\uffd8\122\u0132\001\002\000\006\074" +
    "\u0103\121\u0102\001\002\000\004\066\u0131\001\002\000\030" +
    "\005\u0111\032\u0112\035\u010b\051\u0107\052\u0110\053\u0113\054" +
    "\u010e\055\u010a\066\u010d\067\u0106\073\u0105\001\002\000\004" +
    "\125\u012e\001\002\000\004\067\u012d\001\002\000\026\006" +
    "\uffc9\010\uffc9\015\uffc9\020\uffc9\033\uffc9\044\uffc9\115\uffc9" +
    "\122\uffc9\124\uffc9\125\uffc9\001\002\000\022\006\uffce\010" +
    "\uffce\015\uffce\020\uffce\033\uffce\044\uffce\115\uffce\122\uffce" +
    "\001\002\000\016\006\uffd4\010\uffd4\020\uffd4\033\uffd4\044" +
    "\uffd4\122\uffd4\001\002\000\016\006\uffc2\010\uffc2\020\uffc2" +
    "\033\uffc2\044\uffc2\122\uffc2\001\002\000\022\006\uffca\010" +
    "\uffca\015\uffca\020\uffca\033\uffca\044\uffca\115\uffca\122\uffca" +
    "\001\002\000\004\066\375\001\002\000\016\006\uffd5\010" +
    "\uffd5\020\uffd5\033\uffd5\044\uffd5\122\uffd5\001\002\000\016" +
    "\006\uffd2\010\uffd2\020\uffd2\033\uffd2\044\uffd2\122\uffd2\001" +
    "\002\000\022\006\uffcb\010\uffcb\015\uffcb\020\uffcb\033\uffcb" +
    "\044\uffcb\115\uffcb\122\uffcb\001\002\000\016\006\uffd3\010" +
    "\uffd3\020\uffd3\033\uffd3\044\uffd3\122\uffd3\001\002\000\022" +
    "\006\uffcd\010\uffcd\015\uffcd\020\uffcd\033\uffcd\044\uffcd\115" +
    "\uffcd\122\uffcd\001\002\000\004\123\u011b\001\002\000\004" +
    "\005\u0114\001\002\000\022\006\uffcc\010\uffcc\015\uffcc\020" +
    "\uffcc\033\uffcc\044\uffcc\115\uffcc\122\uffcc\001\002\000\004" +
    "\123\u0115\001\002\000\006\067\u0106\073\u0105\001\002\000" +
    "\004\124\u0117\001\002\000\004\030\u0118\001\002\000\016" +
    "\051\u0107\052\u0110\053\u0113\054\u010e\055\u010a\066\u0119\001" +
    "\002\000\022\006\uffc3\010\uffc3\015\uffc3\020\uffc3\033\uffc3" +
    "\044\uffc3\115\uffc3\122\uffc3\001\002\000\022\006\uffc5\010" +
    "\uffc5\015\uffc5\020\uffc5\033\uffc5\044\uffc5\115\uffc5\122\uffc5" +
    "\001\002\000\006\067\u0106\073\u0105\001\002\000\004\124" +
    "\u011d\001\002\000\004\030\u011e\001\002\000\016\051\u0107" +
    "\052\u0110\053\u0113\054\u010e\055\u010a\066\u011f\001\002\000" +
    "\022\006\uffc4\010\uffc4\015\uffc4\020\uffc4\033\uffc4\044\uffc4" +
    "\115\uffc4\122\uffc4\001\002\000\022\006\uffc6\010\uffc6\015" +
    "\uffc6\020\uffc6\033\uffc6\044\uffc6\115\uffc6\122\uffc6\001\002" +
    "\000\004\015\u012c\001\002\000\006\104\u0126\121\u0102\001" +
    "\002\000\006\015\uffc0\122\u0124\001\002\000\006\015\uffbf" +
    "\066\375\001\002\000\004\015\uffbe\001\002\000\026\005" +
    "\u0111\032\u0112\035\u0129\051\u0107\052\u0110\053\u0113\054\u010e" +
    "\055\u010a\067\u0106\073\u0105\001\002\000\006\015\uffbc\122" +
    "\uffbc\001\002\000\006\015\uffbd\122\uffbd\001\002\000\004" +
    "\066\u012b\001\002\000\006\015\uffbb\122\uffbb\001\002\000" +
    "\006\015\uffba\122\uffba\001\002\000\016\006\uffc1\010\uffc1" +
    "\020\uffc1\033\uffc1\044\uffc1\122\uffc1\001\002\000\026\006" +
    "\uffc8\010\uffc8\015\uffc8\020\uffc8\033\uffc8\044\uffc8\115\uffc8" +
    "\122\uffc8\124\uffc8\125\uffc8\001\002\000\004\125\u012f\001" +
    "\002\000\006\067\u0106\073\u0105\001\002\000\024\006\uffc7" +
    "\010\uffc7\015\uffc7\020\uffc7\033\uffc7\044\uffc7\115\uffc7\122" +
    "\uffc7\124\uffc7\001\002\000\010\074\uffd0\104\uffd0\121\uffd0" +
    "\001\002\000\016\006\uffd7\010\uffd7\020\uffd7\033\uffd7\044" +
    "\uffd7\066\375\001\002\000\014\006\uffd6\010\uffd6\020\uffd6" +
    "\033\uffd6\044\uffd6\001\002\000\014\006\uffb5\020\uffb5\033" +
    "\uffb5\044\uffb5\066\u0143\001\002\000\012\006\uffac\020\uffac" +
    "\033\uffac\044\u0136\001\002\000\012\006\uffa9\020\uffa9\033" +
    "\uffa9\066\375\001\002\000\010\006\ufff5\020\ufff5\033\ufff5" +
    "\001\002\000\012\006\uffaa\020\uffaa\033\uffaa\122\u0141\001" +
    "\002\000\010\006\uffad\020\uffad\033\uffad\001\002\000\006" +
    "\104\u013b\121\u0102\001\002\000\030\005\u0111\032\u0112\035" +
    "\u010b\051\u0107\052\u0110\053\u0113\054\u010e\055\u010a\066\u013f" +
    "\067\u0106\073\u0105\001\002\000\012\006\uffa6\020\uffa6\033" +
    "\uffa6\122\uffa6\001\002\000\012\006\uffa5\020\uffa5\033\uffa5" +
    "\122\uffa5\001\002\000\012\006\uffa8\020\uffa8\033\uffa8\122" +
    "\uffa8\001\002\000\012\006\uffa7\020\uffa7\033\uffa7\122\uffa7" +
    "\001\002\000\012\006\uffa4\020\uffa4\033\uffa4\122\uffa4\001" +
    "\002\000\012\006\uffa9\020\uffa9\033\uffa9\066\375\001\002" +
    "\000\010\006\uffab\020\uffab\033\uffab\001\002\000\004\074" +
    "\u0148\001\002\000\012\006\uffb9\020\uffb9\033\uffb9\044\uffb9" +
    "\001\002\000\014\006\uffb6\020\uffb6\033\uffb6\044\uffb6\122" +
    "\u0146\001\002\000\014\006\uffb5\020\uffb5\033\uffb5\044\uffb5" +
    "\066\u0143\001\002\000\012\006\uffb7\020\uffb7\033\uffb7\044" +
    "\uffb7\001\002\000\016\047\u014d\050\u014c\065\u014b\067\u014a" +
    "\070\u014f\071\u014e\001\002\000\014\006\uffb4\020\uffb4\033" +
    "\uffb4\044\uffb4\122\uffb4\001\002\000\014\006\uffb3\020\uffb3" +
    "\033\uffb3\044\uffb3\122\uffb3\001\002\000\014\006\uffb0\020" +
    "\uffb0\033\uffb0\044\uffb0\122\uffb0\001\002\000\014\006\uffae" +
    "\020\uffae\033\uffae\044\uffae\122\uffae\001\002\000\014\006" +
    "\uffaf\020\uffaf\033\uffaf\044\uffaf\122\uffaf\001\002\000\014" +
    "\006\uffb1\020\uffb1\033\uffb1\044\uffb1\122\uffb1\001\002\000" +
    "\014\006\uffb2\020\uffb2\033\uffb2\044\uffb2\122\uffb2\001\002" +
    "\000\010\006\ufffa\020\ufffa\033\ufffa\001\002\000\030\007" +
    "\045\015\u0152\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\006\002" +
    "\ufffc\125\ufffc\001\002\000\030\007\045\015\u0154\017\047" +
    "\022\042\036\034\045\031\060\044\061\040\062\027\063" +
    "\037\066\041\001\002\000\006\002\ufffe\125\ufffe\001\002" +
    "\000\006\002\ufffb\125\ufffb\001\002\000\030\007\045\015" +
    "\u0157\017\047\022\042\036\034\045\031\060\044\061\040" +
    "\062\027\063\037\066\041\001\002\000\006\002\ufffd\125" +
    "\ufffd\001\002\000\004\114\u0159\001\002\000\006\044\u015a" +
    "\066\375\001\002\000\004\066\375\001\002\000\006\115" +
    "\uff79\122\uff79\001\002\000\006\115\u0164\122\u0163\001\002" +
    "\000\006\104\u015e\121\u0102\001\002\000\026\005\u0111\032" +
    "\u0112\051\u0107\052\u0110\053\u0113\054\u010e\055\u010a\066\u0161" +
    "\067\u0106\073\u0105\001\002\000\006\115\uff77\122\uff77\001" +
    "\002\000\006\115\uff78\122\uff78\001\002\000\006\115\uff75" +
    "\122\uff75\001\002\000\006\115\uff76\122\uff76\001\002\000" +
    "\006\044\u015a\066\375\001\002\000\004\122\u0165\001\002" +
    "\000\012\006\uff7c\010\uff7c\042\uff7c\044\uff7c\001\002\000" +
    "\006\115\uff7a\122\uff7a\001\002\000\006\104\u0168\121\u0102" +
    "\001\002\000\026\005\u0111\032\u0112\051\u0107\052\u0110\053" +
    "\u0113\054\u010e\055\u010a\066\u016b\067\u0106\073\u0105\001\002" +
    "\000\006\115\uff73\122\uff73\001\002\000\006\115\uff74\122" +
    "\uff74\001\002\000\006\115\uff71\122\uff71\001\002\000\006" +
    "\115\uff72\122\uff72\001\002\000\004\006\u016e\001\002\000" +
    "\026\007\045\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\030\007" +
    "\045\015\u0170\017\047\022\042\036\034\045\031\060\044" +
    "\061\040\062\027\063\037\066\041\001\002\000\004\122" +
    "\u0171\001\002\000\010\006\uff7d\020\uff7d\033\uff7d\001\002" +
    "\000\006\104\u0173\114\u0174\001\002\000\014\051\u0107\052" +
    "\u0110\053\u0113\054\u010e\055\u010a\001\002\000\006\044\u015a" +
    "\066\375\001\002\000\006\115\u0176\122\u0163\001\002\000" +
    "\004\104\u0177\001\002\000\016\051\u0107\052\u0110\053\u0113" +
    "\054\u010e\055\u010a\066\u0178\001\002\000\004\122\u017b\001" +
    "\002\000\004\122\u017a\001\002\000\012\006\uff80\010\uff80" +
    "\042\uff80\044\uff80\001\002\000\012\006\uff7f\010\uff7f\042" +
    "\uff7f\044\uff7f\001\002\000\004\122\u017d\001\002\000\012" +
    "\006\uff7e\010\uff7e\042\uff7e\044\uff7e\001\002\000\004\122" +
    "\u017f\001\002\000\016\006\uffd9\010\uffd9\020\uffd9\033\uffd9" +
    "\042\024\044\uffd9\001\002\000\010\006\ufff6\020\ufff6\033" +
    "\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\016\057\017\060\012\063\021\064\016" +
    "\067\020\070\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u016c\010\022\001\001\000\002\001\001\000" +
    "\032\005\034\006\u0155\033\053\040\045\041\032\046\052" +
    "\054\031\055\051\056\035\065\027\066\047\071\042\001" +
    "\001\000\014\057\017\060\012\063\021\064\016\067\u014f" +
    "\001\001\000\006\007\024\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0134" +
    "\001\001\000\012\011\375\012\377\013\u0100\017\376\001" +
    "\001\000\002\001\001\000\032\005\034\006\050\033\053" +
    "\040\045\041\032\046\052\054\031\055\051\056\035\065" +
    "\027\066\047\071\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\034\006\352\033\053\040\045\041\032" +
    "\046\052\054\031\055\051\056\035\065\027\066\047\071" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\056\033\053\040\045\041\032\046\052\054\031" +
    "\055\051\056\035\065\027\066\047\071\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\076\071\070\001\001\000\006\035\210\071" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\206\071\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\174\071\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\173\071\070\001\001\000\006" +
    "\035\172\071\070\001\001\000\006\035\171\071\070\001" +
    "\001\000\006\035\161\071\070\001\001\000\006\035\160" +
    "\071\070\001\001\000\006\035\157\071\070\001\001\000" +
    "\006\035\156\071\070\001\001\000\006\035\155\071\070" +
    "\001\001\000\006\035\154\071\070\001\001\000\006\035" +
    "\153\071\070\001\001\000\006\035\152\071\070\001\001" +
    "\000\006\035\151\071\070\001\001\000\006\035\150\071" +
    "\070\001\001\000\006\035\147\071\070\001\001\000\006" +
    "\035\123\071\070\001\001\000\006\035\122\071\070\001" +
    "\001\000\006\035\121\071\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\033\142\037" +
    "\137\040\135\041\127\046\141\054\126\055\140\056\130" +
    "\065\125\066\136\071\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\034\006\144\033\053\040\045\041" +
    "\032\046\052\054\031\055\051\056\035\065\027\066\047" +
    "\071\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\056\033\053\040\045\041\032\046\052" +
    "\054\031\055\051\056\035\065\027\066\047\071\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\033\142\037\164\040\135\041\127\046\141" +
    "\054\126\055\140\056\130\065\125\066\136\071\133\001" +
    "\001\000\032\005\034\006\166\033\053\040\045\041\032" +
    "\046\052\054\031\055\051\056\035\065\027\066\047\071" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\033\053\040\045\041\032\046\052\054\031\055" +
    "\051\056\035\065\027\066\047\071\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\204" +
    "\071\070\001\001\000\010\035\200\071\070\072\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\203" +
    "\071\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\213\071\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\035\220\047\217\050\221\051\216\071\070\001" +
    "\001\000\002\001\001\000\014\035\220\050\225\051\216" +
    "\052\224\071\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\033\142\037\232\040\135\041\127\046\141" +
    "\054\126\055\140\056\130\065\125\066\136\071\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\034\006\234\033\053\040\045\041\032\046\052" +
    "\054\031\055\051\056\035\065\027\066\047\071\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\056" +
    "\033\053\040\045\041\032\046\052\054\031\055\051\056" +
    "\035\065\027\066\047\071\042\001\001\000\002\001\001" +
    "\000\006\035\245\071\070\001\001\000\030\033\142\037" +
    "\241\040\135\041\127\046\141\054\126\055\140\056\130" +
    "\065\125\066\136\071\133\001\001\000\032\005\034\006" +
    "\243\033\053\040\045\041\032\046\052\054\031\055\051" +
    "\056\035\065\027\066\047\071\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\056\033\053\040\045" +
    "\041\032\046\052\054\031\055\051\056\035\065\027\066" +
    "\047\071\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\251\071" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\033\142\037\255\040\135\041\127\046\141\054\126\055" +
    "\140\056\130\065\125\066\136\071\133\001\001\000\032" +
    "\005\034\006\333\033\053\040\045\041\032\046\052\054" +
    "\031\055\051\056\035\065\027\066\047\071\042\001\001" +
    "\000\006\042\260\043\261\001\001\000\002\001\001\000" +
    "\030\033\142\037\326\040\135\041\127\046\141\054\126" +
    "\055\140\056\130\065\125\066\136\071\133\001\001\000" +
    "\004\043\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\033\142\037\267\040\135\041\127\046\141\054" +
    "\126\055\140\056\130\065\125\066\136\071\133\001\001" +
    "\000\002\001\001\000\032\005\034\006\322\033\053\040" +
    "\045\041\032\046\052\054\031\055\051\056\035\065\027" +
    "\066\047\071\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\272\071\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\033\142\037" +
    "\276\040\135\041\127\046\141\054\126\055\140\056\130" +
    "\065\125\066\136\071\133\001\001\000\032\005\034\006" +
    "\277\033\053\040\045\041\032\046\052\054\031\055\051" +
    "\056\035\065\027\066\047\071\042\001\001\000\006\042" +
    "\260\043\261\001\001\000\030\005\056\033\053\040\045" +
    "\041\032\046\052\054\031\055\051\056\035\065\027\066" +
    "\047\071\042\001\001\000\006\042\303\043\261\001\001" +
    "\000\002\001\001\000\030\033\142\037\315\040\135\041" +
    "\127\046\141\054\126\055\140\056\130\065\125\066\136" +
    "\071\133\001\001\000\004\043\264\001\001\000\002\001" +
    "\001\000\030\033\142\037\307\040\135\041\127\046\141" +
    "\054\126\055\140\056\130\065\125\066\136\071\133\001" +
    "\001\000\032\005\034\006\311\033\053\040\045\041\032" +
    "\046\052\054\031\055\051\056\035\065\027\066\047\071" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\033\053\040\045\041\032\046\052\054\031\055" +
    "\051\056\035\065\027\066\047\071\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\034\006\317\033" +
    "\053\040\045\041\032\046\052\054\031\055\051\056\035" +
    "\065\027\066\047\071\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\056\033\053\040\045\041\032" +
    "\046\052\054\031\055\051\056\035\065\027\066\047\071" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\033\053\040\045\041\032\046\052\054\031\055" +
    "\051\056\035\065\027\066\047\071\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\034\006\330\033" +
    "\053\040\045\041\032\046\052\054\031\055\051\056\035" +
    "\065\027\066\047\071\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\056\033\053\040\045\041\032" +
    "\046\052\054\031\055\051\056\035\065\027\066\047\071" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\033\053\040\045\041\032\046\052\054\031\055" +
    "\051\056\035\065\027\066\047\071\042\001\001\000\006" +
    "\042\303\043\261\001\001\000\006\035\341\071\070\001" +
    "\001\000\002\001\001\000\006\035\340\071\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\345\071\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\200\071\070\072" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\033\053\040\045\041\032\046\052\054\031\055" +
    "\051\056\035\065\027\066\047\071\042\001\001\000\006" +
    "\035\354\071\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\357\071\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\033\142\037\363\040\135\041" +
    "\127\046\141\054\126\055\140\056\130\065\125\066\136" +
    "\071\133\001\001\000\032\005\034\006\365\033\053\040" +
    "\045\041\032\046\052\054\031\055\051\056\035\065\027" +
    "\066\047\071\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\056\033\053\040\045\041\032\046\052" +
    "\054\031\055\051\056\035\065\027\066\047\071\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\200\071\070\072\372\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\u0107\015\u0103\016\u010e\022\u0108" +
    "\032\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\u0121\020\u0120\021" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0103\016\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0119\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0103\016\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\u0121\020\u0124" +
    "\021\u0122\001\001\000\002\001\001\000\012\014\u0126\015" +
    "\u0103\016\u0129\032\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\u0132\012\377\013\u0100\017\376\001\001" +
    "\000\002\001\001\000\006\024\u0143\026\u0144\001\001\000" +
    "\004\027\u0136\001\001\000\010\013\u0139\030\u0138\031\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\u013b\015\u0103\016\u013f" +
    "\022\u013c\032\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\u0139\030\u0141\031\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\u0146\026\u0144\001\001\000\002\001\001\000" +
    "\004\025\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\034\006\u0152\033\053\040\045\041\032\046\052\054" +
    "\031\055\051\056\035\065\027\066\047\071\042\001\001" +
    "\000\002\001\001\000\030\005\056\033\053\040\045\041" +
    "\032\046\052\054\031\055\051\056\035\065\027\066\047" +
    "\071\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\056\033\053\040\045\041\032\046\052\054\031" +
    "\055\051\056\035\065\027\066\047\071\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\u015c\061\u015b" +
    "\062\u015a\001\001\000\004\013\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\u015e" +
    "\015\u0103\016\u0161\032\u015f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u015c\062\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\u0168" +
    "\015\u0103\016\u016b\032\u0169\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\034\006\u016e\033\053\040\045\041" +
    "\032\046\052\054\031\055\051\056\035\065\027\066\047" +
    "\071\042\001\001\000\030\005\056\033\053\040\045\041" +
    "\032\046\052\054\031\055\051\056\035\065\027\066\047" +
    "\071\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u017b\001\001\000\010\013\u015c" +
    "\061\u0174\062\u015a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0178\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u017f" +
    "\010\022\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    PLexer s;
    PParser(PLexer s){this.s = s;}
    private LinkedList<PError> errorList = new LinkedList<>();
    public LinkedList<PError> getSyntaxErrorList(){
        return errorList;
    }
//
    public void syntax_error(Symbol s){
        errorList.add(new PError("✍ Sintaxis", "No se esperaba el componente: "+s.value, s.left, s.right));
//          System.out.println("Syntax error at line: "+s.left+" column: "+s.right + " at symbol: "+s.value);
//          System.out.println(expected_token_ids());
    }
//
    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new PError("✍ ERROR FATAL - Deteniendo...", "No se esperaba el componente: "+s.value, s.left, s.right));
//        System.out.println("Unrecovered syntax error at line: "+s.left+" column: "+s.right + " at symbol: "+s.value);
//        System.out.println(expected_token_ids());
    }

//    public void report_error(String message, Object info){
//        errorList.add(new PError("Sintaxis", message);
//        System.out.println("info: "+info + " message: "+message);
//    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PParser$actions {


  private final PParser parser;

  /** Constructor */
  CUP$PParser$actions(PParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PParser$do_action_part00000000(
    int                        CUP$PParser$act_num,
    java_cup.runtime.lr_parser CUP$PParser$parser,
    java.util.Stack            CUP$PParser$stack,
    int                        CUP$PParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PParser$result;

      /* select the action based on the action number */
      switch (CUP$PParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		RESULT = start_val;
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PParser$parser.done_parsing();
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= PROGRAM DOT 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Program a = (Program)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PROGRAM 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Program a = (Program)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; errorList.add(new PError("✍ Sintaxis", "Se esperaba un punto al final del programa", -1, -1)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PROGRAM_HEADER PROCEDURE_FUNCTION_DECLARATIONS RW_BEGIN PROGRAM_BODY RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new Program(a,c,b);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PROGRAM_HEADER RW_BEGIN PROGRAM_BODY RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new Program(a,null,b);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAM ::= PROGRAM_HEADER PROCEDURE_FUNCTION_DECLARATIONS RW_BEGIN RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
        RESULT = new Program(a,c,null);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAM ::= PROGRAM_HEADER RW_BEGIN RW_END 
            {
              Program RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Program.ProgramHeader a = (Program.ProgramHeader)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
        RESULT = new Program(a,null,null);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",1, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROCEDURE_FUNCTION_DECLARATIONS ::= PROCEDURE_FUNCTION_DECLARATIONS PROCEDURE_FUNCTION_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATIONS",54, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROCEDURE_FUNCTION_DECLARATIONS ::= PROCEDURE_FUNCTION_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATIONS",54, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDURE_FUNCTION_DECLARATION ::= FUNCTION_DECLARATION_BLOCK 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATION",53, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDURE_FUNCTION_DECLARATION ::= PROCEDURE_DECLARATION_BLOCK 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_FUNCTION_DECLARATION",53, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAM_HEADER ::= RW_PROGRAM ID SEMICOLON DECLARATIONS_BLOCK 
            {
              Program.ProgramHeader RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
    RESULT = new Program.ProgramHeader(aleft, aright, a);
    var typesList = (LinkedList<TypeDeclaration>)b[0];
    var constsList = (LinkedList<Statement>)b[1];
    var varsList = (LinkedList<Statement>)b[2];
    if (typesList == null) typesList = new LinkedList<>();
    if (constsList == null) constsList = new LinkedList<>();
    if (varsList == null) varsList = new LinkedList<>();

//    var newTypesList = Program.reverseLinkedList(typesList);

    RESULT.getStatements().addAll(typesList);

    RESULT.getStatements().addAll(constsList);
    RESULT.getStatements().addAll(varsList);

    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_HEADER",2, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARATIONS_BLOCK ::= TYPE_DECLARATION_BLOCK CONSTANT_DECLARATION_BLOCK VARIABLE_DECLARATION_BLOCK 
            {
              Object[] RESULT =null;
		int typesListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int typesListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<TypeDeclaration> typesList = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int constsListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int constsListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> constsList = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> varsList = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
                var newTypesList = Program.reverseLinkedList(typesList);
                RESULT = new Object[]{newTypesList, constsList, varsList};
                System.out.println("Declarations block: "+typesList.size()+" "+constsList.size()+" "+varsList.size());
                
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS_BLOCK",5, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAM_BODY ::= PROGRAM_BODY PROGRAM_BODY_STATEMENT 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",4, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAM_BODY ::= PROGRAM_BODY_STATEMENT 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",4, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROGRAM_BODY_STATEMENT ::= SYMBOL_ASSIGNATION SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROGRAM_BODY_STATEMENT ::= ARRAY_ASSIGNATION SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PROGRAM_BODY_STATEMENT ::= IF_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROGRAM_BODY_STATEMENT ::= WHILE_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROGRAM_BODY_STATEMENT ::= REPEAT_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROGRAM_BODY_STATEMENT ::= FOR_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROGRAM_BODY_STATEMENT ::= RW_BREAK SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROGRAM_BODY_STATEMENT ::= RW_CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROGRAM_BODY_STATEMENT ::= CALL_TO_METHOD SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROGRAM_BODY_STATEMENT ::= CASE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROGRAM_BODY_STATEMENT ::= WRITELN_CALL SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROGRAM_BODY_STATEMENT ::= READLN_CALL SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY_STATEMENT",3, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENT ::= SYMBOL_ASSIGNATION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENT ::= ARRAY_ASSIGNATION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STATEMENT ::= IF_STATEMENT 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STATEMENT ::= CASE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STATEMENT ::= WHILE_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STATEMENT ::= REPEAT_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STATEMENT ::= FOR_STATEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STATEMENT ::= RW_BREAK 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STATEMENT ::= RW_CONTINUE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STATEMENT ::= CALL_TO_METHOD 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STATEMENT ::= WRITELN_CALL 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STATEMENT ::= READLN_CALL 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",29, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE_DECLARATION_BLOCK ::= RW_TYPE TYPE_DECLARATION_LIST 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<TypeDeclaration> a = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_BLOCK",6, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE_DECLARATION_BLOCK ::= 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_BLOCK",6, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION SEMICOLON 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE_DECLARATION_LIST ::= TYPE_DECLARATION SEMICOLON TYPE_DECLARATION_LIST 
            {
              LinkedList<TypeDeclaration> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<TypeDeclaration> b = (LinkedList<TypeDeclaration>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add((TypeDeclaration)a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION_LIST",7, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b, false, false, false, 1, 0, 0); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS ARRAY_TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b.getParentTypeId(), true, false, false, ((int)b.getRangeDefinition()[1] - (int)b.getRangeDefinition()[0])+1, (int)b.getRangeDefinition()[0], (int)b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS RANGE_DEF 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, TypesTable.DefaultTypes.INTEGER.id, false, true, false, 1, (int)b[0], (int)b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE_DECLARATION ::= IDENTIFIER_LIST EQUALS ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration(aleft, aright, a, b, false, false, false, 0, 0, 0); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPE_DECLARATION ::= RECORD_DECLARATION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDENTIFIER_LIST ::= IDENTIFIER_LIST COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",9, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDENTIFIER_LIST ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IDENTIFIER_LIST",9, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPE ::= RW_INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.INTEGER.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TYPE ::= RW_REAL 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.REAL.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPE ::= RW_CHAR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.CHARACTER.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TYPE ::= RW_STRING 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.STRING.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TYPE ::= RW_BOOLEAN 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = TypesTable.DefaultTypes.BOOLEAN.id; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RANGE_INT ::= INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = Integer.parseInt(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_INT",11, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RANGE_INT ::= MINUS INTEGER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = Integer.parseInt(a) * -1; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_INT",11, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RANGE_DEF ::= RANGE_INT DOT DOT RANGE_INT 
            {
              Object[] RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Integer min = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer max = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Object[]{min, max}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RANGE_DEF",12, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY_TYPE ::= RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF TYPE 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAY_TYPE ::= RW_PACKED RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF TYPE 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY_TYPE ::= RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF ID 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY_TYPE ::= RW_PACKED RW_ARRAY OPENBRACKET RANGE_DEF CLOSEBRACKET RW_OF ID 
            {
              TypeDeclaration.ArrayTypeDeclarationHelper RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new TypeDeclaration.ArrayTypeDeclarationHelper(a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_TYPE",10, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RECORD_DECLARATION ::= IDENTIFIER_LIST EQUALS RECORD_USE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RECORD_DECLARATION",13, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RECORD_USE ::= RW_RECORD FIELD_LIST RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("RECORD_USE",16, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FIELD_LIST ::= FIELD_DECLARATION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FIELD_LIST ::= FIELD_DECLARATION SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FIELD_LIST ::= FIELD_DECLARATION SEMICOLON FIELD_LIST 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_LIST",14, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FIELD_DECLARATION ::= IDENTIFIER_LIST COLON RW_RECORD ID 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FIELD_DECLARATION",15, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONSTANT_DECLARATION_BLOCK ::= RW_CONST CONSTANT_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_BLOCK",17, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSTANT_DECLARATION_BLOCK ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_BLOCK",17, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONSTANT_DECLARATION_LIST ::= CONSTANT_DECLARATION SEMICOLON CONSTANT_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONSTANT_DECLARATION_LIST ::= CONSTANT_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONSTANT_DECLARATION_LIST ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION_LIST",18, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSTANT_DECLARATION ::= ID EQUALS CONSTANT_VALUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new ConstantDeclaration(-1, aleft, aright, a, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_DECLARATION",20, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONSTANT_VALUE ::= INTEGER 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.INTEGER.id, Integer.parseInt(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONSTANT_VALUE ::= DECIMAL 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.REAL.id, Double.parseDouble(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONSTANT_VALUE ::= CHAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.CHARACTER.id, (int)a.charAt(0)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONSTANT_VALUE ::= STRING 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.STRING.id, a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONSTANT_VALUE ::= RW_TRUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, true); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONSTANT_VALUE ::= RW_FALSE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, false); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CONSTANT_VALUE",19, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLE_DECLARATION_BLOCK ::= RW_VAR VARIABLE_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_BLOCK",21, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLE_DECLARATION_BLOCK ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_BLOCK",21, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLE_DECLARATION_LIST ::= VARIABLE_DECLARATION SEMICOLON VARIABLE_DECLARATION_LIST 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = b; b.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLE_DECLARATION_LIST ::= VARIABLE_DECLARATION 
            {
              LinkedList<Statement> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLE_DECLARATION_LIST ::= 
            {
              LinkedList<Statement> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION_LIST",22, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, false, false, null, null, null, b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, false, false, null, null, b, -1); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, true, false, false, b.getRangeDefinition()[0], b.getRangeDefinition()[1], b.getParentTypeName(), b.getParentTypeId());
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON RECORD_USE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLE_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new VariableDeclaration(-1, aleft, aright, a, null, false, true, false, b[0], b[1], null, TypesTable.DefaultTypes.INTEGER.id); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SYMBOL_ASSIGNATION ::= ID COLON EQUALS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("SYMBOL_ASSIGNATION",30, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARRAY_ASSIGNATION ::= ID OPENBRACKET EXPRESSION CLOSEBRACKET COLON EQUALS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new ArrayAssignation(a, b, c, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARRAY_ASSIGNATION",25, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
  var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
  RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);

    var statementAsList2 = new LinkedList<Statement>();
    statementAsList2.add(c);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), statementAsList2, aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(c);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-12)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-10)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
  var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), aleft, aright);
  
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);

    var statementAsList2 = new LinkedList<Statement>();
    statementAsList2.add(d);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), statementAsList2, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(d);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END ELSE_IF_BLOCKS RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> d = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-13)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IF_STATEMENT ::= RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT ELSE_IF_BLOCKS RW_ELSE RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> d = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, statementAsList, c), d, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("IF_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		IfStatement.ConditionBlock b = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",32, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		IfStatement.ConditionBlock b = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",32, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN STATEMENT 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new IfStatement.ConditionBlock(a, statementAsList);
 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",33, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESSION CLOSEPAR RW_THEN RW_BEGIN PROGRAM_BODY RW_END 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
        RESULT = new IfStatement.ConditionBlock(a, b);
     
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",33, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE_STATEMENT ::= RW_CASE OPENPAR EXPRESSION CLOSEPAR RW_OF CASE_ELEMENT_LIST CASE_ELSE RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",36, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE_STATEMENT ::= RW_CASE OPENPAR EXPRESSION CLOSEPAR RW_OF CASE_ELEMENT_LIST RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_STATEMENT",36, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE_ELEMENT_LIST ::= CASE_ELEMENT_LIST CASE_ELEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT_LIST",37, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASE_ELEMENT_LIST ::= CASE_ELEMENT 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT_LIST",37, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASE_ELEMENT ::= CASE_VALUE_LIST COLON STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT",38, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASE_ELEMENT ::= CASE_VALUE_LIST COLON RW_BEGIN PROGRAM_BODY RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELEMENT",38, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CASE_VALUE_LIST ::= CASE_VALUE_LIST COMMA EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_VALUE_LIST",39, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CASE_VALUE_LIST ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_VALUE_LIST",39, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CASE_ELSE ::= RW_ELSE STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELSE",40, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CASE_ELSE ::= RW_ELSE RW_BEGIN PROGRAM_BODY RW_END 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CASE_ELSE",40, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHILE_STATEMENT ::= RW_WHILE OPENPAR EXPRESSION CLOSEPAR RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
    var statementAsList = new LinkedList<Statement>();
    statementAsList.add(b);
    RESULT = new WhileLoop(a, statementAsList, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WHILE_STATEMENT ::= RW_WHILE OPENPAR EXPRESSION CLOSEPAR RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> b = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
    RESULT = new WhileLoop(a, b, aleft, aright);
    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WHILE_STATEMENT",42, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-8)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // REPEAT_STATEMENT ::= RW_REPEAT PROGRAM_BODY RW_UNTIL EXPRESSION SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		LinkedList<Statement> a = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		
                    RESULT = new RepeatLoop(b, a, aleft, aright);
                    
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("REPEAT_STATEMENT",43, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_TO EXPRESSION RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_DOWNTO EXPRESSION RW_DO STATEMENT SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-9)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_TO EXPRESSION RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FOR_STATEMENT ::= RW_FOR ID COLON EQUALS EXPRESSION RW_DOWNTO EXPRESSION RW_DO RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FOR_STATEMENT",44, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-11)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR COLON TYPE SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, b, c, null}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR COLON ID SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, b, -1, c}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-7)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCTION_DECLARATION_START ::= RW_FUNCTION ID COLON TYPE SEMICOLON 
            {
              Object[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new Object[]{a, new LinkedList<>(), b}; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_START",46, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCTION_DECLARATION_BLOCK ::= FUNCTION_DECLARATION_START DECLARATIONS_BLOCK RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-4)).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<Statement> c = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		
var allHeaderStatements = new LinkedList<Statement>();
var typesList = (LinkedList<TypeDeclaration>)b[0];
var constsList = (LinkedList<Statement>)b[1];
var varsList = (LinkedList<Statement>)b[2];
if (typesList == null) typesList = new LinkedList<>();
if (constsList == null) constsList = new LinkedList<>();
if (varsList == null) varsList = new LinkedList<>();
allHeaderStatements.addAll(typesList);
allHeaderStatements.addAll(constsList);
allHeaderStatements.addAll(varsList);

RESULT = new FunctionDeclaration(
    0,
    aleft,
    aright,
    (String)a[0],
    (LinkedList<HashMap>)a[1],
    allHeaderStatements,
    c,
    (String)a[2],
    (int)a[3]
    );
   
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BLOCK",45, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PROCEDURE_DECLARATION_START ::= RW_PROCEDURE ID OPENPAR PARAMETERS_DECLARATION CLOSEPAR SEMICOLON 
            {
              Object[] RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_DECLARATION_START",50, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PROCEDURE_DECLARATION_BLOCK ::= PROCEDURE_DECLARATION_START DECLARATIONS_BLOCK RW_BEGIN PROGRAM_BODY RW_END SEMICOLON 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PROCEDURE_DECLARATION_BLOCK",49, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-5)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PARAMETERS_DECLARATION ::= PARAMETERS_DECLARATION SEMICOLON PARAMETER_DECLARATION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECLARATION",47, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMETERS_DECLARATION ::= PARAMETER_DECLARATION 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECLARATION",47, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b.getParentTypeId()); RESULT.put("isArray", true); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", b.getRangeDefinition()[0]); RESULT.put("maxVal", b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON RANGE_DEF 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", TypesTable.DefaultTypes.INTEGER.id); RESULT.put("isArray", false); RESULT.put("isRange", true); RESULT.put("isRecord", false); RESULT.put("minVal", b[0]); RESULT.put("maxVal", b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARAMETER_DECLARATION ::= IDENTIFIER_LIST COLON ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", false); RESULT.put("ids", a); RESULT.put("type", b); RESULT.put("isArray", false); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", null); RESULT.put("maxVal", null); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON ARRAY_TYPE 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		TypeDeclaration.ArrayTypeDeclarationHelper b = (TypeDeclaration.ArrayTypeDeclarationHelper)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b.getParentTypeId()); RESULT.put("isArray", true); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", b.getRangeDefinition()[0]); RESULT.put("maxVal", b.getRangeDefinition()[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON RANGE_DEF 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", TypesTable.DefaultTypes.INTEGER.id); RESULT.put("isArray", false); RESULT.put("isRange", true); RESULT.put("isRecord", false); RESULT.put("minVal", b[0]); RESULT.put("maxVal", b[1]); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAMETER_DECLARATION ::= RW_VAR IDENTIFIER_LIST COLON ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new HashMap<>(); RESULT.put("byRef", true); RESULT.put("ids", a); RESULT.put("type", b); RESULT.put("isArray", false); RESULT.put("isRange", false); RESULT.put("isRecord", false); RESULT.put("minVal", null); RESULT.put("maxVal", null); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",48, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CALL_TO_METHOD ::= ID OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_TO_METHOD",55, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CALL_ARGUMENTS ::= CALL_ARGUMENTS COMMA EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",56, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CALL_ARGUMENTS ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",56, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CALL_ARGUMENTS ::= 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",56, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ARGUMENT ::= EXPRESSION 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",57, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // WRITELN_CALL ::= RW_WRITELN OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("WRITELN_CALL",51, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // READLN_CALL ::= RW_READLN OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("READLN_CALL",52, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESSION ::= ID 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new SymbolAccess(a, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESSION ::= INTEGER 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.INTEGER.id, Integer.parseInt(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESSION ::= DECIMAL 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.REAL.id, Double.parseDouble(a)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESSION ::= CHAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.CHARACTER.id, (int)a.charAt(0)); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESSION ::= STRING 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.STRING.id, a); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESSION ::= RW_TRUE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, true); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESSION ::= RW_FALSE 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, TypesTable.DefaultTypes.BOOLEAN.id, false); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.SUM, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.SUB, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESSION ::= EXPRESSION ASTERISK EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.MUL, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESSION ::= EXPRESSION RW_DIV EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.DIV, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESSION ::= EXPRESSION RW_MOD EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, b, ArithmeticOperators.MOD, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESSION ::= MINUS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Arithmetic(a, ArithmeticOperators.NEG, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESSION ::= RW_NOT EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, LogicalOperators.NOT, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESSION ::= EXPRESSION RW_AND EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.AND, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESSION ::= EXPRESSION RW_OR EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.OR, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESSION ::= EXPRESSION RW_AND_THEN EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.ANDTHEN, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESSION ::= EXPRESSION RW_OR_ELSE EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Logical(a, b, LogicalOperators.ORELSE, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESSION ::= EXPRESSION EQUALS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESSION ::= EXPRESSION LESS EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.LESS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESSION ::= EXPRESSION GREATER EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.GREATER, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESSION ::= EXPRESSION LESSEQUAL EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.LESS_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESSION ::= EXPRESSION GREATEREQUAL EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.GREATER_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESSION ::= EXPRESSION LTGT EXPRESSION 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.peek()).value;
		 RESULT = new Comparison(a, b, ComparisonOperators.NOT_EQUALS, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESSION ::= ID OPENBRACKET EXPRESSION CLOSEBRACKET 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement b = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, aleft, aright); 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-3)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESSION ::= CALL_TO_METHOD 
            {
              Statement RESULT =null;

              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESSION ::= OPENPAR EXPRESSION CLOSEPAR 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-1)).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$PParser$stack.elementAt(CUP$PParser$top-1)).value;
		 RESULT = a; 
              CUP$PParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",27, ((java_cup.runtime.Symbol)CUP$PParser$stack.elementAt(CUP$PParser$top-2)), ((java_cup.runtime.Symbol)CUP$PParser$stack.peek()), RESULT);
            }
          return CUP$PParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PParser$do_action(
    int                        CUP$PParser$act_num,
    java_cup.runtime.lr_parser CUP$PParser$parser,
    java.util.Stack            CUP$PParser$stack,
    int                        CUP$PParser$top)
    throws java.lang.Exception
    {
              return CUP$PParser$do_action_part00000000(
                               CUP$PParser$act_num,
                               CUP$PParser$parser,
                               CUP$PParser$stack,
                               CUP$PParser$top);
    }
}

}
